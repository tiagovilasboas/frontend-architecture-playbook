[
  {
    "file": "src/content/patterns/atomic-design.tsx",
    "title": "Atomic Design - Átomos",
    "description": null,
    "code": "// components/atoms/Button.tsx\nfunction Button({ children, variant = 'primary', ...props }) {\n  return (\n    <button \n      className={`btn btn-${variant}`}\n      {...props}\n    >\n      {children}\n    </button>\n  );\n}\n\n// components/atoms/Input.tsx\nfunction Input({ label, ...props }) {\n  return (\n    <div className=\"input-wrapper\">\n      {label && <label>{label}</label>}\n      <input {...props} />\n    </div>\n  );\n}\n\n// components/atoms/Icon.tsx\nfunction Icon({ name, size = 16 }) {\n  return (\n    <span className={`icon icon-${name}`} style={{ fontSize: size }}>\n      {getIcon(name)}\n    </span>\n  );\n}\n\n// Componentes básicos\n// Não podem ser divididos\n// Reutilizáveis em todo lugar"
  },
  {
    "file": "src/content/patterns/atomic-design.tsx",
    "title": "Atomic Design - Moléculas",
    "description": null,
    "code": "// components/molecules/SearchBar.tsx\nimport { Input } from '../atoms/Input';\nimport { Button } from '../atoms/Button';\nimport { Icon } from '../atoms/Icon';\n\nfunction SearchBar({ onSearch, placeholder }) {\n  const [query, setQuery] = useState('');\n  \n  const handleSubmit = (e) => {\n    e.preventDefault();\n    onSearch(query);\n  };\n  \n  return (\n    <form onSubmit={handleSubmit} className=\"search-bar\">\n      <Input\n        value={query}\n        onChange={(e) => setQuery(e.target.value)}\n        placeholder={placeholder}\n      />\n      <Button type=\"submit\">\n        <Icon name=\"search\" />\n      </Button>\n    </form>\n  );\n}\n\n// components/molecules/FormField.tsx\nimport { Input } from '../atoms/Input';\nimport { Icon } from '../atoms/Icon';\n\nfunction FormField({ label, error, icon, ...props }) {\n  return (\n    <div className=\"form-field\">\n      <Input \n        label={label}\n        {...props}\n      />\n      {icon && <Icon name={icon} />}\n      {error && <span className=\"error\">{error}</span>}\n    </div>\n  );\n}\n\n// Combinação de átomos\n// Funcionalidade específica\n// Reutilizável"
  },
  {
    "file": "src/content/patterns/component-driven.tsx",
    "title": "Button Atômico",
    "description": "Exemplo de componente atômico reutilizável.",
    "code": "import React from 'react';\n\ninterface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  variant?: 'primary' | 'secondary';\n}\n\nexport function Button({ variant = 'primary', ...props }: ButtonProps) {\n  return (\n    <button\n      style={{\n        background: variant === 'primary' ? '#228be6' : '#e9ecef',\n        color: variant === 'primary' ? '#fff' : '#222',\n        border: 'none',\n        borderRadius: 4,\n        padding: '8px 16px',\n        fontWeight: 600,\n        cursor: 'pointer',\n      }}\n      {...props}\n    />\n  );\n}\n"
  },
  {
    "file": "src/content/patterns/component-driven.tsx",
    "title": "Reutilização",
    "description": "Exemplo de como o mesmo componente pode ser usado em vários lugares",
    "code": "// Um componente, vários usos\n<Button>Salvar</Button>\n<Button variant=\"secondary\">Cancelar</Button>\n<Button variant=\"danger\">Excluir</Button>\n<Button size=\"small\">Ver mais</Button>\n\n// Muda o CSS do Button, muda em todo lugar\n// Não precisa caçar cada botão da aplicação"
  },
  {
    "file": "src/content/patterns/component-driven.tsx",
    "title": "Isolamento",
    "description": "Exemplo de componente isolado que funciona independentemente",
    "code": "// Componente isolado\nfunction UserCard({ user }) {\n  return (\n    <Card>\n      <Avatar src={user.avatar} />\n      <Text>{user.name}</Text>\n      <Text>{user.email}</Text>\n    </Card>\n  );\n}\n\n// Funciona sozinho, não depende de nada externo\n// Pode testar isoladamente\n// Pode usar em qualquer lugar"
  },
  {
    "file": "src/content/patterns/clean-architecture.tsx",
    "title": "User Entity",
    "description": "Entidade com regras de negócio puras",
    "code": "export class User {\n  constructor(\n    public id: string,\n    public name: string,\n    public email: string,\n    private active: boolean = true\n  ) {}\n\n  isActive(): boolean {\n    return this.active;\n  }\n}"
  },
  {
    "file": "src/content/patterns/clean-architecture.tsx",
    "title": "CreateUser Use Case",
    "description": "Caso de uso que orquestra a criação de usuário",
    "code": "import { User } from './user-entity';\n\nexport interface UserRepository {\n  save(user: User): Promise<User>;\n}\n\nexport class CreateUserUseCase {\n  constructor(private userRepo: UserRepository) {}\n\n  async execute(data: { id: string; name: string; email: string }): Promise<User> {\n    const user = new User(data.id, data.name, data.email);\n    return this.userRepo.save(user);\n  }\n}"
  },
  {
    "file": "src/content/patterns/clean-architecture.tsx",
    "title": "User Repository Implementation",
    "description": "Adaptador que conecta com API externa",
    "code": "class UserRepositoryImpl implements UserRepository {\n  async save(user: User): Promise<User> {\n    return fetch('/api/users', {\n      method: 'POST',\n      body: JSON.stringify(user)\n    });\n  }\n}"
  },
  {
    "file": "src/content/patterns/clean-architecture.tsx",
    "title": "React Component",
    "description": "Componente React que usa o caso de uso",
    "code": "function UserForm() {\n  const createUser = useCreateUser();\n  \n  return (\n    <form onSubmit={handleSubmit}>\n      <input name=\"name\" />\n      <button type=\"submit\">Criar</button>\n    </form>\n  );\n}"
  },
  {
    "file": "src/content/patterns/clean-architecture.tsx",
    "title": "Over-engineering",
    "description": "Exemplo de over-engineering em projeto simples",
    "code": "// ❌ RUIM - Over-engineering\n// Projeto simples de blog\n// Clean Architecture desnecessário\n\nexport class BlogPost {\n  constructor(\n    public id: string,\n    public title: string,\n    public content: string\n  ) {}\n}\n\nexport interface BlogRepository {\n  save(post: BlogPost): Promise<BlogPost>;\n}\n\nexport class CreateBlogPostUseCase {\n  constructor(private blogRepo: BlogRepository) {}\n  \n  async execute(data: { title: string; content: string }): Promise<BlogPost> {\n    const post = new BlogPost(generateId(), data.title, data.content);\n    return this.blogRepo.save(post);\n  }\n}\n\n// ✅ BOM - Simples quando apropriado\nfunction BlogForm() {\n  const [title, setTitle] = useState('');\n  const [content, setContent] = useState('');\n  \n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    await fetch('/api/posts', {\n      method: 'POST',\n      body: JSON.stringify({ title, content })\n    });\n  };\n  \n  return (\n    <form onSubmit={handleSubmit}>\n      <input value={title} onChange={(e) => setTitle(e.target.value)} />\n      <textarea value={content} onChange={(e) => setContent(e.target.value)} />\n      <button type=\"submit\">Publicar</button>\n    </form>\n  );\n}"
  },
  {
    "file": "src/content/patterns/clean-architecture.tsx",
    "title": "Dependência Circular",
    "description": "Exemplo de dependência circular que quebra a regra",
    "code": "// ❌ RUIM - Dependência circular\n// entities/User.ts\nexport class User {\n  constructor(\n    public id: string,\n    public name: string\n  ) {}\n  \n  // Quebra a regra: entidade conhece caso de uso\n  async save() {\n    return await createUserUseCase.execute(this);\n  }\n}\n\n// usecases/CreateUserUseCase.ts\nexport class CreateUserUseCase {\n  // Quebra a regra: caso de uso conhece entidade\n  async execute(user: User) {\n    return await userRepository.save(user);\n  }\n}\n\n// ✅ BOM - Dependências corretas\n// entities/User.ts\nexport class User {\n  constructor(\n    public id: string,\n    public name: string\n  ) {}\n  \n  // Entidade só tem regras de negócio\n  isValid(): boolean {\n    return this.name.length > 0;\n  }\n}\n\n// usecases/CreateUserUseCase.ts\nexport class CreateUserUseCase {\n  constructor(private userRepo: UserRepository) {}\n  \n  async execute(data: { name: string }): Promise<User> {\n    const user = new User(generateId(), data.name);\n    \n    if (!user.isValid()) {\n      throw new Error('Nome inválido');\n    }\n    \n    return this.userRepo.save(user);\n  }\n}"
  },
  {
    "file": "src/content/patterns/feature-flags.tsx",
    "title": "useFeatureFlag",
    "description": "Hook para controlar funcionalidades dinamicamente",
    "code": "import { useEffect, useState } from 'react';\n\nexport function useFeatureFlag(flagKey: string, defaultValue = false) {\n  const [isEnabled, setIsEnabled] = useState(defaultValue);\n\n  useEffect(() => {\n    fetch(`/api/flags/${flagKey}`)\n      .then((res) => res.json())\n      .then((data) => setIsEnabled(!!data.enabled))\n      .catch(() => setIsEnabled(defaultValue));\n  }, [flagKey, defaultValue]);\n\n  return isEnabled;\n}"
  },
  {
    "file": "src/content/patterns/feature-flags.tsx",
    "title": "Provider simples",
    "description": "Provider para gerenciar feature flags",
    "code": "// Provider simples\nconst FeatureFlagsProvider = ({ children }) => {\n  const [flags, setFlags] = useState({});\n  \n  useEffect(() => {\n    fetch('/api/flags')\n      .then(res => res.json())\n      .then(setFlags);\n  }, []);\n  \n  return (\n    <FeatureFlagsContext.Provider value={flags}>\n      {children}\n    </FeatureFlagsContext.Provider>\n  );\n};"
  },
  {
    "file": "src/content/patterns/feature-flags.tsx",
    "title": "Targeting por usuário",
    "description": "Exemplo de targeting por usuário",
    "code": "// Targeting por usuário\nfunction useFeatureFlag(flagKey: string, user?: User) {\n  const [isEnabled, setIsEnabled] = useState(false);\n  \n  useEffect(() => {\n    if (!user) return;\n    \n    fetch(`/api/flags/${flagKey}?userId=${user.id}`)\n      .then(res => res.json())\n      .then(data => setIsEnabled(data.enabled));\n  }, [flagKey, user]);\n  \n  return isEnabled;\n}"
  },
  {
    "file": "src/content/patterns/feature-flags.tsx",
    "title": "Rollback automático",
    "description": "Exemplo de rollback automático",
    "code": "// Rollback automático\nfunction useFeatureFlagWithRollback(flagKey: string) {\n  const [isEnabled, setIsEnabled] = useState(false);\n  const [errorRate, setErrorRate] = useState(0);\n  \n  useEffect(() => {\n    // Monitora taxa de erro\n    const interval = setInterval(() => {\n      fetch('/api/metrics/errors')\n        .then(res => res.json())\n        .then(data => {\n          if (data.errorRate > 0.05) { // 5%\n            setIsEnabled(false); // Rollback automático\n          }\n        });\n    }, 60000);\n    \n    return () => clearInterval(interval);\n  }, []);\n  \n  return isEnabled;\n}"
  },
  {
    "file": "src/content/patterns/feature-flags.tsx",
    "title": "Deploy tradicional",
    "description": "Exemplo de deploy tradicional sem feature flags",
    "code": "// ❌ RUIM - Deploy tradicional\n// 1. Desenvolve nova funcionalidade\nfunction NewFeature() {\n  return <div>Nova funcionalidade</div>;\n}\n\n// 2. Testa localmente\n// 3. Faz PR\n// 4. Code review\n// 5. Merge\n// 6. Deploy para staging\n// 7. Testa staging\n// 8. Deploy para produção\n// 9. Reza para não quebrar\n// 10. Se quebrar, rollback manual\n\n// Problemas:\n// - Deploy lento\n// - Risco alto\n// - Rollback manual\n// - Não pode testar em produção"
  },
  {
    "file": "src/content/patterns/feature-flags.tsx",
    "title": "Deploy por ambiente",
    "description": "Exemplo de deploy por ambiente",
    "code": "// ❌ RUIM - Deploy por ambiente\n// staging\nif (process.env.NODE_ENV === 'staging') {\n  // Nova funcionalidade\n  <NewFeature />\n} else {\n  // Funcionalidade antiga\n  <OldFeature />\n}\n\n// Problemas:\n// - Código morto em produção\n// - Não pode testar em produção\n// - Deploy por ambiente\n// - Difícil de gerenciar"
  },
  {
    "file": "src/content/patterns/feature-flags.tsx",
    "title": "Flags espalhadas",
    "description": "Exemplo de flags espalhadas pelo código",
    "code": "// ❌ RUIM - Flags espalhadas\n// Componente A\nif (window.featureFlags.newUI) {\n  return <NewUI />;\n}\n\n// Componente B\nif (localStorage.getItem('newFeature')) {\n  return <NewFeature />;\n}\n\n// Componente C\nif (process.env.REACT_APP_NEW_FEATURE === 'true') {\n  return <NewFeature />;\n}\n\n// Problemas:\n// - Inconsistente\n// - Difícil de gerenciar\n// - Sem centralização\n// - Debugging difícil"
  },
  {
    "file": "src/content/patterns/feature-flags.tsx",
    "title": "Código morto",
    "description": "Exemplo de código morto com feature flags",
    "code": "// ❌ RUIM - Código morto\nfunction Component() {\n  const isNewFeatureEnabled = useFeatureFlag('new-feature');\n  \n  return (\n    <div>\n      {isNewFeatureEnabled ? (\n        <NewFeature />\n      ) : (\n        <OldFeature />\n      )}\n      \n      {/* Código morto que nunca será usado */}\n      <DeprecatedComponent />\n      <UnusedFeature />\n      <LegacyCode />\n    </div>\n  );\n}\n\n// Problemas:\n// - Bundle maior\n// - Código morto\n// - Manutenção difícil\n// - Confusão"
  },
  {
    "file": "src/content/patterns/feature-flags.tsx",
    "title": "Muitas chamadas",
    "description": "Exemplo de muitas chamadas para API de flags",
    "code": "// ❌ RUIM - Muitas chamadas\nfunction App() {\n  const isNewUI = useFeatureFlag('new-ui');\n  const isDarkMode = useFeatureFlag('dark-mode');\n  const isAnalytics = useFeatureFlag('analytics');\n  const isNotifications = useFeatureFlag('notifications');\n  const isChat = useFeatureFlag('chat');\n  \n  // 5 chamadas para API\n  // Performance ruim\n  // Sem cache\n  \n  return <div>...</div>;\n}\n\n// ✅ BOM - Uma chamada\nfunction App() {\n  const flags = useFeatureFlags();\n  \n  // Uma chamada para API\n  // Cache automático\n  // Performance boa\n  \n  return <div>...</div>;\n}"
  },
  {
    "file": "src/content/patterns/feature-flags.tsx",
    "title": "Testes complexos",
    "description": "Exemplo de testes complexos com feature flags",
    "code": "// ❌ RUIM - Testes complexos\nit('should render new feature when enabled', () => {\n  // Mock complexo\n  jest.spyOn(global, 'fetch').mockResolvedValue({\n    json: () => Promise.resolve({ enabled: true })\n  });\n  \n  render(<Component />);\n  \n  // Teste frágil\n  expect(screen.getByText('New Feature')).toBeInTheDocument();\n});\n\n// ✅ BOM - Testes simples\nit('should render new feature when enabled', () => {\n  render(\n    <FeatureFlagsProvider flags={{ 'new-feature': true }}>\n      <Component />\n    </FeatureFlagsProvider>\n  );\n  \n  expect(screen.getByText('New Feature')).toBeInTheDocument();\n});"
  },
  {
    "file": "src/content/patterns/event-driven.tsx",
    "title": "Event Emitter",
    "description": "Componente que dispara eventos",
    "code": "// Componente que dispara evento\nfunction AddToCartButton({ product }) {\n  const handleClick = () => {\n    // Dispara evento, não chama função diretamente\n    window.dispatchEvent(new CustomEvent('cart:add', {\n      detail: { product, quantity: 1 }\n    }));\n  };\n\n  return <button onClick={handleClick}>Adicionar</button>;\n}"
  },
  {
    "file": "src/content/patterns/event-driven.tsx",
    "title": "Event Listener",
    "description": "Componente que escuta eventos",
    "code": "// Componente que escuta evento\nfunction CartWidget() {\n  useEffect(() => {\n    const handleAddToCart = (event) => {\n      const { product, quantity } = event.detail;\n      // Atualiza carrinho\n      updateCart(product, quantity);\n    };\n\n    window.addEventListener('cart:add', handleAddToCart);\n    return () => window.removeEventListener('cart:add', handleAddToCart);\n  }, []);\n\n  return <div>Items: {cartItems.length}</div>;\n}"
  },
  {
    "file": "src/content/patterns/event-driven.tsx",
    "title": "Event Bus",
    "description": "Sistema que gerencia eventos",
    "code": "// Event Bus centralizado\nclass EventBus {\n  private listeners = new Map();\n\n  on(event, callback) {\n    if (!this.listeners.has(event)) {\n      this.listeners.set(event, []);\n    }\n    this.listeners.get(event).push(callback);\n  }\n\n  emit(event, data) {\n    const callbacks = this.listeners.get(event) || [];\n    callbacks.forEach(callback => callback(data));\n  }\n}\n\n// Uso global\nconst eventBus = new EventBus();\neventBus.on('user:login', (user) => {\n  // Múltiplos listeners podem reagir\n  updateHeader(user);\n  loadUserPreferences(user);\n  trackAnalytics(user);\n});"
  },
  {
    "file": "src/content/patterns/event-driven.tsx",
    "title": "E-commerce - Event-driven",
    "description": "Exemplo de e-commerce usando eventos",
    "code": "// ❌ RUIM - Acoplamento direto\nfunction AddToCartButton({ product }) {\n  const { updateCart, updateCounter, trackAnalytics, showNotification, checkStock } = useCart();\n  \n  const handleClick = async () => {\n    await updateCart(product);\n    updateCounter();\n    trackAnalytics('add_to_cart', product);\n    showNotification('Produto adicionado!');\n    await checkStock(product.id);\n  };\n\n  return <button onClick={handleClick}>Adicionar</button>;\n}\n\n// ✅ BOM - Event-Driven\nfunction AddToCartButton({ product }) {\n  const handleClick = () => {\n    // Só dispara evento, não conhece ninguém\n    window.dispatchEvent(new CustomEvent('cart:add', {\n      detail: { product, quantity: 1 }\n    }));\n  };\n\n  return <button onClick={handleClick}>Adicionar</button>;\n}\n\n// Listeners independentes\nfunction CartWidget() {\n  useEffect(() => {\n    const handleAddToCart = (event) => {\n      updateCart(event.detail.product);\n    };\n    window.addEventListener('cart:add', handleAddToCart);\n    return () => window.removeEventListener('cart:add', handleAddToCart);\n  }, []);\n}\n\nfunction AnalyticsTracker() {\n  useEffect(() => {\n    const handleAddToCart = (event) => {\n      trackEvent('add_to_cart', event.detail.product);\n    };\n    window.addEventListener('cart:add', handleAddToCart);\n    return () => window.removeEventListener('cart:add', handleAddToCart);\n  }, []);\n}\n\nfunction NotificationSystem() {\n  useEffect(() => {\n    const handleAddToCart = (event) => {\n      showToast('Produto adicionado ao carrinho!');\n    };\n    window.addEventListener('cart:add', handleAddToCart);\n    return () => window.removeEventListener('cart:add', handleAddToCart);\n  }, []);\n}\n\n// Adicione novos listeners sem modificar o botão\nfunction StockChecker() {\n  useEffect(() => {\n    const handleAddToCart = async (event) => {\n      await checkStock(event.detail.product.id);\n    };\n    window.addEventListener('cart:add', handleAddToCart);\n    return () => window.removeEventListener('cart:add', handleAddToCart);\n  }, []);\n}"
  },
  {
    "file": "src/content/patterns/event-driven.tsx",
    "title": "Dashboard - Event-driven",
    "description": "Exemplo de dashboard usando eventos",
    "code": "// ❌ RUIM - Prop drilling e callbacks\nfunction Dashboard() {\n  const [data, setData] = useState({});\n  \n  const handleDataUpdate = (newData) => {\n    setData(newData);\n    // Precisa chamar todos os widgets\n    updateChart(newData);\n    updateMetrics(newData);\n    checkAlerts(newData);\n    logActivity(newData);\n  };\n\n  return (\n    <div>\n      <DataFetcher onUpdate={handleDataUpdate} />\n      <ChartWidget data={data} />\n      <MetricsWidget data={data} />\n      <AlertsWidget data={data} />\n      <LogWidget data={data} />\n    </div>\n  );\n}\n\n// ✅ BOM - Event-Driven\nfunction DataFetcher() {\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      const newData = await fetchData();\n      // Dispara evento, não conhece widgets\n      window.dispatchEvent(new CustomEvent('data:updated', {\n        detail: { data: newData, timestamp: Date.now() }\n      }));\n    }, 5000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  return null;\n}\n\nfunction ChartWidget() {\n  const [data, setData] = useState({});\n  \n  useEffect(() => {\n    const handleDataUpdate = (event) => {\n      setData(event.detail.data);\n    };\n    window.addEventListener('data:updated', handleDataUpdate);\n    return () => window.removeEventListener('data:updated', handleDataUpdate);\n  }, []);\n\n  return <Chart data={data} />;\n}\n\nfunction MetricsWidget() {\n  const [data, setData] = useState({});\n  \n  useEffect(() => {\n    const handleDataUpdate = (event) => {\n      setData(event.detail.data);\n    };\n    window.addEventListener('data:updated', handleDataUpdate);\n    return () => window.removeEventListener('data:updated', handleDataUpdate);\n  }, []);\n\n  return <Metrics data={data} />;\n}\n\n// Adicione novos widgets sem modificar DataFetcher\nfunction AlertsWidget() {\n  useEffect(() => {\n    const handleDataUpdate = (event) => {\n      checkAlerts(event.detail.data);\n    };\n    window.addEventListener('data:updated', handleDataUpdate);\n    return () => window.removeEventListener('data:updated', handleDataUpdate);\n  }, []);\n\n  return <Alerts />;\n}"
  },
  {
    "file": "src/content/patterns/jamstack.tsx",
    "title": "JavaScript no cliente",
    "description": "Exemplo de uso de JavaScript no cliente em JAMstack",
    "code": "// JavaScript no cliente\nfunction ProductList() {\n  const [products, setProducts] = useState([]);\n  \n  useEffect(() => {\n    fetch('/api/products')\n      .then(res => res.json())\n      .then(data => setProducts(data));\n  }, []);\n  \n  return (\n    <div>\n      {products.map(product => (\n        <ProductCard key={product.id} product={product} />\n      ))}\n    </div>\n  );\n}"
  },
  {
    "file": "src/content/patterns/jamstack.tsx",
    "title": "APIs",
    "description": "Exemplo de uso de APIs em JAMstack",
    "code": "// APIs em JAMstack\nfetch('/api/products')\n  .then(res => res.json())\n  .then(data => console.log(data));\n\n// Pode ser REST, GraphQL, etc.\n// APIs desacopladas do front-end"
  },
  {
    "file": "src/content/patterns/jamstack.tsx",
    "title": "HTML pré-renderizado",
    "description": "Exemplo de HTML pré-renderizado em JAMstack",
    "code": "<!-- HTML pré-renderizado -->\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Meu Site JAMstack</title>\n</head>\n<body>\n  <div id=\"root\">Conteúdo estático gerado no build</div>\n</body>\n</html>\n// SEO perfeito, performance máxima"
  },
  {
    "file": "src/content/patterns/component-driven.tsx",
    "title": "Exemplo 1: E-commerce - Sistema de Produtos",
    "description": "Exemplo prático de sistema de produtos reutilizando componentes",
    "code": "// E-commerce - Sistema de Produtos\nfunction ProductCard({ product }) {\n  return (\n    <Card>\n      <Title order={4}>{product.name}</Title>\n      <Text>R$ {product.price}</Text>\n      <Button>Comprar</Button>\n    </Card>\n  );\n}\n\nfunction ProductList({ products }) {\n  return (\n    <div>\n      {products.map(p => <ProductCard key={p.id} product={p} />)}\n    </div>\n  );\n}"
  },
  {
    "file": "src/content/patterns/component-driven.tsx",
    "title": "Exemplo 2: Dashboard - Métricas Reutilizáveis",
    "description": "Dashboard com componentes de métricas reutilizáveis",
    "code": "// Dashboard - Métricas Reutilizáveis\nfunction MetricCard({ title, value, change }) {\n  return (\n    <Card>\n      <Title order={4}>{title}</Title>\n      <Text size=\"xl\" fw={700}>{value}</Text>\n      <Text size=\"sm\" c={change > 0 ? 'green' : 'red'}>{change > 0 ? '+' : ''}{change}%</Text>\n    </Card>\n  );\n}\n\nfunction Dashboard() {\n  return (\n    <div>\n      <MetricCard title=\"Vendas Hoje\" value=\"R$ 15.420\" change={12} />\n      <MetricCard title=\"Usuários Ativos\" value=\"1.234\" change={-3} />\n      <MetricCard title=\"Taxa de Conversão\" value=\"2.4%\" change={0.5} />\n    </div>\n  );\n}"
  },
  {
    "file": "src/content/patterns/component-driven.tsx",
    "title": "Vendas Hoje",
    "description": "Exemplo de métrica de vendas no dashboard",
    "code": "<MetricCard title=\"Vendas Hoje\" value=\"R$ 15.420\" change={12} />"
  },
  {
    "file": "src/content/patterns/component-driven.tsx",
    "title": "Usuários Ativos",
    "description": "Exemplo de métrica de usuários ativos no dashboard",
    "code": "<MetricCard title=\"Usuários Ativos\" value=\"1.234\" change={-3} />"
  },
  {
    "file": "src/content/patterns/component-driven.tsx",
    "title": "Taxa de Conversão",
    "description": "Exemplo de métrica de taxa de conversão no dashboard",
    "code": "<MetricCard title=\"Taxa de Conversão\" value=\"2.4%\" change={0.5} />"
  },
  {
    "file": "src/content/patterns/component-driven.tsx",
    "title": "Exemplo 3: Formulários - Sistema de Inputs",
    "description": "Exemplo prático de formulário reutilizando componentes de input",
    "code": "// Formulário - Sistema de Inputs\nfunction InputField({ label, ...props }) {\n  return (\n    <div>\n      <label>{label}</label>\n      <input {...props} />\n    </div>\n  );\n}\n\nfunction Form() {\n  return (\n    <form>\n      <InputField label=\"Nome\" />\n      <InputField label=\"Email\" />\n      <Button type=\"submit\">Enviar</Button>\n    </form>\n  );\n}"
  },
  {
    "file": "src/content/patterns/component-driven.tsx",
    "title": "Armadilha: Abstração Excessiva",
    "description": "Exemplo de armadilha de abstração excessiva",
    "code": "// ❌ RUIM - Abstração Excessiva\nfunction withExtraLogic(Component) {\n  return function Wrapper(props) {\n    // Lógica desnecessária\n    return <Component {...props} />;\n  };\n}\n\n// ✅ BOM - Só abstraia quando necessário"
  },
  {
    "file": "src/content/patterns/component-driven.tsx",
    "title": "Armadilha: Props Drilling",
    "description": "Exemplo de armadilha de props drilling",
    "code": "// ❌ RUIM - Props Drilling\nfunction Parent({ user }) {\n  return <Child user={user} />;\n}\nfunction Child({ user }) {\n  return <GrandChild user={user} />;\n}\nfunction GrandChild({ user }) {\n  return <div>{user.name}</div>;\n}\n\n// ✅ BOM - Context API para evitar props drilling"
  },
  {
    "file": "src/content/patterns/component-driven.tsx",
    "title": "Armadilha: Componentes Gigantes",
    "description": "Exemplo de armadilha de componentes gigantes",
    "code": "// ❌ RUIM - Componente gigante\nfunction BigComponent() {\n  // 500 linhas de código\n  // Difícil de manter\n}\n\n// ✅ BOM - Divida em componentes menores"
  },
  {
    "file": "src/content/patterns/component-driven.tsx",
    "title": "Armadilha: Props Inconsistentes",
    "description": "Exemplo de armadilha de props inconsistentes",
    "code": "// ❌ RUIM - Props inconsistentes\n<Button cor='azul' tamanho='grande' />\n<Button color='blue' size='large' />\n\n// ✅ BOM - Padronize as props"
  },
  {
    "file": "src/content/patterns/component-driven.tsx",
    "title": "Armadilha: Sem Testes",
    "description": "Exemplo de armadilha de componentes sem testes",
    "code": "// ❌ RUIM - Sem testes\nfunction Button() {\n  // ...\n}\n\n// ✅ BOM - Teste seus componentes\ndescribe('Button', () => {\n  it('deve renderizar', () => {\n    render(<Button />);\n    expect(screen.getByRole('button')).toBeInTheDocument();\n  });\n});"
  },
  {
    "file": "src/content/patterns/islands-architecture.tsx",
    "title": "HTML estático",
    "description": "HTML estático por padrão",
    "code": "<!-- HTML estático por padrão -->\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Meu Site</title>\n</head>\n<body>\n  <header>\n    <h1>Meu Site</h1>\n    <nav>\n      <a href=\"/\">Home</a>\n      <a href=\"/produtos\">Produtos</a>\n    </nav>\n  </header>\n  \n  <main>\n    <h2>Bem-vindo</h2>\n    <p>Conteúdo estático, carregamento rápido.</p>\n    \n    <!-- Ilha de carrinho - JavaScript seletivo -->\n    <div id=\"cart-island\">\n      <!-- Será hidratado com JavaScript -->\n    </div>\n  </main>\n  \n  <footer>\n    <p>&copy; 2024</p>\n  </footer>\n</body>\n</html>\n\n// HTML estático por padrão\n// Performance máxima\n// SEO perfeito\n// JavaScript seletivo"
  },
  {
    "file": "src/content/patterns/islands-architecture.tsx",
    "title": "Ilha de carrinho",
    "description": "Exemplo de ilha de carrinho",
    "code": "// Ilha de carrinho\n// components/CartIsland.tsx\nimport { hydrateRoot } from 'react-dom/client';\n\nfunction CartIsland() {\n  const [items, setItems] = useState([]);\n  \n  const addItem = (product) => {\n    setItems(prev => [...prev, product]);\n  };\n  \n  return (\n    <div className=\"cart-island\">\n      <h3>Carrinho ({items.length})</h3>\n      {items.map(item => (\n        <div key={item.id}>{item.name}</div>\n      ))}\n      <button onClick={() => addItem(product)}>\n        Adicionar\n      </button>\n    </div>\n  );\n}\n\n// Hidratação seletiva\nif (document.getElementById('cart-island')) {\n  hydrateRoot(\n    document.getElementById('cart-island'),\n    <CartIsland />\n  );\n}\n\n// Só esta ilha tem JavaScript\n// Resto da página é estático\n// Performance otimizada"
  },
  {
    "file": "src/content/patterns/islands-architecture.tsx",
    "title": "Hidratação seletiva",
    "description": "Exemplo de hidratação seletiva",
    "code": "// Hidratação seletiva\n// Apenas ilhas específicas têm JavaScript\n\n// Ilha de busca\nif (document.getElementById('search-island')) {\n  hydrateRoot(\n    document.getElementById('search-island'),\n    <SearchIsland />\n  );\n}\n\n// Ilha de carrinho\nif (document.getElementById('cart-island')) {\n  hydrateRoot(\n    document.getElementById('cart-island'),\n    <CartIsland />\n  );\n}\n\n// Ilha de filtros\nif (document.getElementById('filters-island')) {\n  hydrateRoot(\n    document.getElementById('filters-island'),\n    <FiltersIsland />\n  );\n}\n\n// Resto da página permanece estático\n// Performance máxima\n// JavaScript mínimo"
  },
  {
    "file": "src/content/patterns/islands-architecture.tsx",
    "title": "SPA vs Islands",
    "description": "Comparação entre SPA e Islands Architecture",
    "code": "// ❌ RUIM - SPA\n// Toda a página é JavaScript\n// Carregamento lento\n// SEO ruim\n\nfunction SPAApp() {\n  return (\n    <div>\n      <Header />\n      <ProductList />\n      <Cart />\n      <Footer />\n    </div>\n  );\n}\n\n// Tudo hidratado\n// Bundle grande\n// Performance ruim\n\n// ✅ BOM - Islands Architecture\n// HTML estático + ilhas\n\n// HTML estático\n<header>\n  <h1>Produtos</h1>\n</header>\n\n<main>\n  <div id=\"product-list\">\n    <!-- Conteúdo estático -->\n  </div>\n  \n  <div id=\"cart-island\">\n    <!-- Ilha com JavaScript -->\n  </div>\n</main>\n\n<footer>\n  <p>Footer estático</p>\n</footer>\n\n// Performance máxima\n// SEO perfeito\n// JavaScript seletivo"
  },
  {
    "file": "src/content/patterns/islands-architecture.tsx",
    "title": "E-commerce - Islands",
    "description": "Exemplo de e-commerce usando Islands Architecture",
    "code": "// ✅ BOM - Islands Architecture\n// HTML estático por padrão\n<!DOCTYPE html>\n<html>\n<head>\n  <title>E-commerce</title>\n</head>\n<body>\n  <header>\n    <h1>Minha Loja</h1>\n    <nav>\n      <a href=\"/\">Home</a>\n      <a href=\"/produtos\">Produtos</a>\n    </nav>\n  </header>\n  \n  <main>\n    <!-- Conteúdo estático -->\n    <h2>Produtos em Destaque</h2>\n    <div class=\"product-grid\">\n      <div class=\"product-card\">\n        <img src=\"/product1.jpg\" alt=\"Produto 1\" />\n        <h3>Produto 1</h3>\n        <p>R$ 99,90</p>\n      </div>\n      <!-- Mais produtos estáticos -->\n    </div>\n    \n    <!-- Ilha de carrinho -->\n    <div id=\"cart-island\">\n      <!-- JavaScript seletivo -->\n    </div>\n    \n    <!-- Ilha de busca -->\n    <div id=\"search-island\">\n      <!-- JavaScript seletivo -->\n    </div>\n  </main>\n  \n  <footer>\n    <p>&copy; 2024</p>\n  </footer>\n</body>\n</html>\n\n// Performance máxima\n// SEO perfeito\n// JavaScript apenas onde necessário"
  },
  {
    "file": "src/content/patterns/islands-architecture.tsx",
    "title": "Blog - Islands",
    "description": "Exemplo de blog usando Islands Architecture",
    "code": "// ✅ BOM - Islands Architecture\n// HTML estático por padrão\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Meu Blog</title>\n</head>\n<body>\n  <header>\n    <h1>Meu Blog</h1>\n    <nav>\n      <a href=\"/\">Home</a>\n      <a href=\"/artigos\">Artigos</a>\n    </nav>\n  </header>\n  \n  <main>\n    <!-- Conteúdo estático -->\n    <article>\n      <h2>Como usar Islands Architecture</h2>\n      <p>Islands Architecture é uma abordagem...</p>\n      <p>O conteúdo é renderizado no servidor...</p>\n    </article>\n    \n    <!-- Ilha de comentários -->\n    <div id=\"comments-island\">\n      <!-- JavaScript seletivo -->\n    </div>\n    \n    <!-- Ilha de compartilhamento -->\n    <div id=\"share-island\">\n      <!-- JavaScript seletivo -->\n    </div>\n  </main>\n  \n  <footer>\n    <p>&copy; 2024</p>\n  </footer>\n</body>\n</html>\n\n// Conteúdo estático\n// Performance máxima\n// JavaScript seletivo"
  },
  {
    "file": "src/content/patterns/islands-architecture.tsx",
    "title": "Tudo ilha",
    "description": "Exemplo de over-engineering com Islands",
    "code": "// ❌ RUIM - Tudo ilha\n// Cada elemento vira uma ilha\n// Over-engineering\n\n<!DOCTYPE html>\n<html>\n<body>\n  <!-- Ilha desnecessária -->\n  <div id=\"header-island\">\n    <h1>Meu Site</h1>\n  </div>\n  \n  <!-- Ilha desnecessária -->\n  <div id=\"nav-island\">\n    <nav>\n      <a href=\"/\">Home</a>\n    </nav>\n  </div>\n  \n  <!-- Ilha desnecessária -->\n  <div id=\"title-island\">\n    <h2>Título</h2>\n  </div>\n  \n  <!-- Ilha desnecessária -->\n  <div id=\"text-island\">\n    <p>Texto simples</p>\n  </div>\n  \n  <!-- Ilha desnecessária -->\n  <div id=\"footer-island\">\n    <footer>Footer</footer>\n  </div>\n</body>\n</html>\n\n// Problemas:\n// - Complexidade desnecessária\n// - Performance ruim\n// - Manutenção difícil\n// - Over-engineering"
  },
  {
    "file": "src/content/patterns/islands-architecture.tsx",
    "title": "Estado compartilhado complexo",
    "description": "Exemplo de estado compartilhado complexo entre ilhas",
    "code": "// ❌ RUIM - Estado compartilhado complexo\n// Ilhas compartilhando estado\n// Complexidade desnecessária\n\n// Ilha A\nfunction CartIsland() {\n  const [cart, setCart] = useState([]);\n  \n  // Compartilha estado com outras ilhas\n  window.cartState = { cart, setCart };\n  \n  return <div>Cart: {cart.length}</div>;\n}\n\n// Ilha B\nfunction ProductIsland() {\n  // Usa estado da ilha A\n  const { cart, setCart } = window.cartState;\n  \n  const addToCart = (product) => {\n    setCart([...cart, product]);\n  };\n  \n  return <button onClick={() => addToCart(product)}>Add</button>;\n}\n\n// Ilha C\nfunction CheckoutIsland() {\n  // Usa estado da ilha A\n  const { cart } = window.cartState;\n  \n  return <div>Total: {cart.length}</div>;\n}\n\n// Problemas:\n// - Acoplamento entre ilhas\n// - Estado global complexo\n// - Difícil de manter\n// - Quebra isolamento"
  },
  {
    "file": "src/content/patterns/islands-architecture.tsx",
    "title": "Build manual complexo",
    "description": "Exemplo de build manual complexo",
    "code": "// ❌ RUIM - Build manual complexo\n// Configuração manual para cada ilha\n// Complexidade desnecessária\n\n// webpack.config.js\nmodule.exports = {\n  entry: {\n    'cart-island': './src/islands/CartIsland.jsx',\n    'search-island': './src/islands/SearchIsland.jsx',\n    'filters-island': './src/islands/FiltersIsland.jsx',\n    'comments-island': './src/islands/CommentsIsland.jsx',\n    'share-island': './src/islands/ShareIsland.jsx',\n    'rating-island': './src/islands/RatingIsland.jsx',\n    'wishlist-island': './src/islands/WishlistIsland.jsx',\n    'notifications-island': './src/islands/NotificationsIsland.jsx'\n  },\n  output: {\n    filename: '[name].js',\n    path: path.resolve(__dirname, 'dist')\n  }\n};\n\n// HTML manual\n<script src=\"/cart-island.js\"></script>\n<script src=\"/search-island.js\"></script>\n<script src=\"/filters-island.js\"></script>\n<script src=\"/comments-island.js\"></script>\n<script src=\"/share-island.js\"></script>\n<script src=\"/rating-island.js\"></script>\n<script src=\"/wishlist-island.js\"></script>\n<script src=\"/notifications-island.js\"></script>\n\n// Problemas:\n// - Configuração manual\n// - Muitos arquivos\n// - Build lento\n// - Manutenção difícil"
  },
  {
    "file": "src/content/patterns/islands-architecture.tsx",
    "title": "Conteúdo dinâmico nas ilhas",
    "description": "Exemplo de conteúdo dinâmico nas ilhas",
    "code": "// ❌ RUIM - Conteúdo dinâmico nas ilhas\n// Ilhas com conteúdo que deveria ser estático\n\n// Ilha de lista de produtos\nfunction ProductListIsland() {\n  const [products, setProducts] = useState([]);\n  \n  useEffect(() => {\n    // Busca produtos dinamicamente\n    fetch('/api/products').then(setProducts);\n  }, []);\n  \n  return (\n    <div>\n      {products.map(product => (\n        <ProductCard key={product.id} product={product} />\n      ))}\n    </div>\n  );\n}\n\n// Problemas:\n// - Conteúdo deveria ser estático\n// - SEO ruim\n// - Performance ruim\n// - Carregamento lento\n\n// ✅ BOM - Conteúdo estático + ilhas funcionais\n// HTML estático\n<div class=\"product-list\">\n  <div class=\"product-card\">\n    <h3>Produto 1</h3>\n    <p>R$ 99,90</p>\n  </div>\n  <!-- Mais produtos estáticos -->\n</div>\n\n<!-- Ilha apenas para funcionalidade -->\n<div id=\"product-actions-island\">\n  <!-- Botões, filtros, etc. -->\n</div>"
  },
  {
    "file": "src/content/patterns/islands-architecture.tsx",
    "title": "Muitas ilhas pequenas",
    "description": "Exemplo de muitas ilhas pequenas",
    "code": "// ❌ RUIM - Muitas ilhas pequenas\n// Cada botão vira uma ilha\n// Over-engineering\n\n<!DOCTYPE html>\n<html>\n<body>\n  <h1>Meu Site</h1>\n  \n  <!-- Ilha desnecessária -->\n  <div id=\"like-button-island\">\n    <button>Like</button>\n  </div>\n  \n  <!-- Ilha desnecessária -->\n  <div id=\"share-button-island\">\n    <button>Share</button>\n  </div>\n  \n  <!-- Ilha desnecessária -->\n  <div id=\"bookmark-button-island\">\n    <button>Bookmark</button>\n  </div>\n  \n  <!-- Ilha desnecessária -->\n  <div id=\"print-button-island\">\n    <button>Print</button>\n  </div>\n  \n  <!-- Ilha desnecessária -->\n  <div id=\"email-button-island\">\n    <button>Email</button>\n  </div>\n</body>\n</html>\n\n// Problemas:\n// - Muitas ilhas pequenas\n// - Performance ruim\n// - Complexidade desnecessária\n// - Over-engineering\n\n// ✅ BOM - Ilhas maiores e funcionais\n<div id=\"actions-island\">\n  <button>Like</button>\n  <button>Share</button>\n  <button>Bookmark</button>\n  <button>Print</button>\n  <button>Email</button>\n</div>"
  },
  {
    "file": "src/content/patterns/jamstack.tsx",
    "title": "WordPress tradicional",
    "description": "Exemplo de WordPress tradicional vs JAMstack",
    "code": "// ❌ RUIM - WordPress tradicional\n// Servidor PHP + MySQL\n// Cada página renderizada no servidor\n// Lento, inseguro, caro\n\n// ✅ BOM - JAMstack\n// Gatsby/Next.js + Headless CMS\n// Build gera HTML estático\n// Servido por CDN\n\n// gatsby-config.js\nmodule.exports = {\n  plugins: [\n    {\n      resolve: 'gatsby-source-contentful',\n      options: {\n        spaceId: process.env.CONTENTFUL_SPACE_ID,\n        accessToken: process.env.CONTENTFUL_ACCESS_TOKEN,\n      },\n    },\n  ],\n};\n\n// gatsby-node.js\nexports.createPages = async ({ graphql, actions }) => {\n  const { createPage } = actions;\n  const result = await graphql(`\n    query {\n      allContentfulBlogPost {\n        edges {\n          node {\n            slug\n          }\n        }\n      }\n    }\n  `);\n  \n  result.data.allContentfulBlogPost.edges.forEach(({ node }) => {\n    createPage({\n      path: `/blog/${node.slug}`,\n      component: path.resolve(`./src/templates/blog-post.js`),\n      context: {\n        slug: node.slug,\n      },\n    });\n  });\n};\n\n// Build gera HTML estático\n// Deploy na Netlify/Vercel\n// CDN serve instantaneamente\n// SEO perfeito\n// Custo mínimo"
  },
  {
    "file": "src/content/patterns/jamstack.tsx",
    "title": "E-commerce tradicional",
    "description": "Exemplo de e-commerce tradicional vs JAMstack",
    "code": "// ❌ RUIM - E-commerce tradicional\n// Servidor renderiza cada página\n// Lento, inseguro, caro\n\n// ✅ BOM - JAMstack E-commerce\n// Next.js + Stripe + Headless CMS\n\n// pages/products/[slug].js\nexport async function getStaticPaths() {\n  const products = await fetchProducts();\n  \n  const paths = products.map(product => ({\n    params: { slug: product.slug }\n  }));\n  \n  return { paths, fallback: false };\n}\n\nexport async function getStaticProps({ params }) {\n  const product = await fetchProduct(params.slug);\n  \n  return {\n    props: { product },\n    revalidate: 3600 // Revalida a cada hora\n  };\n}\n\n// pages/api/create-checkout-session.js\nexport default async function handler(req, res) {\n  const session = await stripe.checkout.sessions.create({\n    payment_method_types: ['card'],\n    line_items: req.body.items,\n    mode: 'payment',\n    success_url: `${req.headers.origin}/success`,\n    cancel_url: `${req.headers.origin}/cancel`,\n  });\n  \n  res.json({ id: session.id });\n}\n\n// HTML pré-renderizado\n// JavaScript para interatividade\n// APIs para funcionalidades\n// Performance máxima\n// SEO perfeito"
  },
  {
    "file": "src/content/patterns/jamstack.tsx",
    "title": "Portfolio complexo",
    "description": "Exemplo de portfolio complexo vs JAMstack",
    "code": "// ❌ RUIM - Portfolio complexo\n// WordPress + plugins\n// Lento, inseguro, difícil de manter\n\n// ✅ BOM - JAMstack Portfolio\n// Astro + Markdown + Netlify\n\n// src/pages/projects/[slug].astro\n---\nexport async function getStaticPaths() {\n  const projects = await Astro.glob('../content/projects/*.md');\n  \n  return projects.map(project => ({\n    params: { slug: project.frontmatter.slug },\n    props: { project }\n  }));\n}\n\nconst { project } = Astro.props;\n---\n\n<html>\n  <head>\n    <title>{project.frontmatter.title}</title>\n  </head>\n  <body>\n    <h1>{project.frontmatter.title}</h1>\n    <div set:html={project.body} />\n    \n    <script>\n      // Interatividade no cliente\n      document.querySelector('form').addEventListener('submit', async (e) => {\n        e.preventDefault();\n        // Envia para API\n      });\n    </script>\n  </body>\n</html>\n\n// Markdown para conteúdo\n// HTML estático para performance\n// JavaScript para interatividade\n// Deploy simples na Netlify\n// Custo zero"
  },
  {
    "file": "src/content/patterns/jamstack.tsx",
    "title": "JAMstack pra tudo",
    "description": "Exemplo de over-engineering com JAMstack",
    "code": "// ❌ RUIM - JAMstack pra tudo\n// Usa JAMstack até onde não precisa\n// Over-engineering\n\n// Aplicação que precisa de servidor\n// Mas força JAMstack\n\n// pages/api/complex-business-logic.js\nexport default async function handler(req, res) {\n  // Lógica complexa que deveria estar no servidor\n  const result = await complexBusinessLogic(req.body);\n  res.json(result);\n}\n\n// Problemas:\n// - Serverless functions limitadas\n// - Cold starts\n// - Complexidade desnecessária\n// - Performance ruim\n\n// ✅ BOM - Use JAMstack quando apropriado\n// Sites de conteúdo\n// Portfolios\n// Blogs\n// Landing pages\n\n// Use servidor quando necessário\n// Aplicações complexas\n// Autenticação avançada\n// Dados em tempo real"
  },
  {
    "file": "src/content/patterns/jamstack.tsx",
    "title": "Build lento",
    "description": "Exemplo de build lento com JAMstack",
    "code": "// ❌ RUIM - Build lento\n// Muitas páginas, build demora\n// Deploy lento\n\n// gatsby-node.js\nexports.createPages = async ({ graphql, actions }) => {\n  const { createPage } = actions;\n  \n  // Busca 10.000 produtos\n  const result = await graphql(`\n    query {\n      allProduct {\n        edges {\n          node {\n            id\n            slug\n          }\n        }\n      }\n    }\n  `);\n  \n  // Cria 10.000 páginas\n  result.data.allProduct.edges.forEach(({ node }) => {\n    createPage({\n      path: `/product/${node.slug}`,\n      component: path.resolve(`./src/templates/product.js`),\n      context: { id: node.id }\n    });\n  });\n};\n\n// Build demora 30 minutos\n// Deploy lento\n// Desenvolvimento lento\n\n// ✅ BOM - Build otimizado\n// ISR (Incremental Static Regeneration)\n// Páginas geradas sob demanda\n// Build rápido"
  },
  {
    "file": "src/content/patterns/jamstack.tsx",
    "title": "Build a cada mudança",
    "description": "Exemplo de build desnecessário a cada mudança",
    "code": "// ❌ RUIM - Build a cada mudança\n// Qualquer mudança gera novo build\n// Deploy desnecessário\n\n// Mudança em um produto\n// → Build completo\n// → Deploy completo\n// → 10 minutos perdidos\n\n// Mudança em CSS\n// → Build completo\n// → Deploy completo\n// → 10 minutos perdidos\n\n// Mudança em texto\n// → Build completo\n// → Deploy completo\n// → 10 minutos perdidos\n\n// Problemas:\n// - Deploy lento\n// - Desenvolvimento lento\n// - Custo alto\n// - Ineficiência\n\n// ✅ BOM - Build inteligente\n// ISR para conteúdo dinâmico\n// CDN para assets estáticos\n// Deploy apenas quando necessário"
  },
  {
    "file": "src/content/patterns/jamstack.tsx",
    "title": "SPA puro",
    "description": "Exemplo de SPA puro vs JAMstack",
    "code": "// ❌ RUIM - SPA puro\n// Tudo JavaScript\n// SEO ruim\n// Performance ruim\n\n// React App\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <ProductList />\n      <Footer />\n    </div>\n  );\n}\n\n// Tudo hidratado\n// Bundle grande\n// SEO ruim\n// Performance ruim\n\n// ✅ BOM - JAMstack\n// HTML estático + JavaScript seletivo\n\n// HTML estático\n<header>\n  <h1>Produtos</h1>\n</header>\n\n<main>\n  <div id=\"product-list\">\n    <!-- Conteúdo estático -->\n  </div>\n  \n  <div id=\"cart-island\">\n    <!-- JavaScript seletivo -->\n  </div>\n</main>\n\n// Performance máxima\n// SEO perfeito\n// JavaScript mínimo"
  },
  {
    "file": "src/content/patterns/jamstack.tsx",
    "title": "Muitas APIs",
    "description": "Exemplo de muitas APIs vs JAMstack otimizado",
    "code": "// ❌ RUIM - Muitas APIs\n// Cada funcionalidade é uma API\n// Performance ruim\n// Complexidade\n\n// API para produtos\nfetch('/api/products')\n\n// API para categorias\nfetch('/api/categories')\n\n// API para usuários\nfetch('/api/users')\n\n// API para pedidos\nfetch('/api/orders')\n\n// API para reviews\nfetch('/api/reviews')\n\n// Problemas:\n// - Muitas requisições\n// - Performance ruim\n// - Complexidade\n// - Custo alto\n\n// ✅ BOM - APIs otimizadas\n// GraphQL para dados\n// Serverless functions para lógica\n// CDN para assets\n\n// Uma query GraphQL\nquery {\n  products {\n    id\n    name\n    price\n    category {\n      name\n    }\n    reviews {\n      rating\n      comment\n    }\n  }\n}\n\n// Uma requisição\n// Dados completos\n// Performance boa"
  },
  {
    "file": "src/content/patterns/monorepo.tsx",
    "title": "Compartilhamento de código",
    "description": "Exemplo de compartilhamento de código no monorepo",
    "code": "// packages/shared/components/\n// Componentes compartilhados\n\nexport function Button({ children, variant = 'primary' }) {\n  return (\n    <button className={`btn btn-${variant}`}>\n      {children}\n    </button>\n  );\n}\n\nexport function Input({ label, ...props }) {\n  return (\n    <div className=\"input-wrapper\">\n      {label && <label>{label}</label>}\n      <input {...props} />\n    </div>\n  );\n}\n\n// packages/shared/utils/\n// Utilitários compartilhados\n\nexport function formatCurrency(value) {\n  return new Intl.NumberFormat('pt-BR', {\n    style: 'currency',\n    currency: 'BRL'\n  }).format(value);\n}\n\nexport function validateEmail(email) {\n  return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);\n}\n\n// Usado em todos os projetos\n// Uma mudança, todo lugar atualiza\n// Consistência garantida"
  },
  {
    "file": "src/content/patterns/monorepo.tsx",
    "title": "Configuração centralizada",
    "description": "Exemplo de configuração centralizada no monorepo",
    "code": "// root/.eslintrc.js\n// Configuração centralizada\nmodule.exports = {\n  extends: [\n    '@company/eslint-config',\n    'next/core-web-vitals'\n  ],\n  rules: {\n    'no-console': 'warn',\n    'prefer-const': 'error'\n  }\n};\n\n// root/package.json\n{\n  \"name\": \"@company/monorepo\",\n  \"private\": true,\n  \"workspaces\": [\n    \"packages/*\",\n    \"apps/*\"\n  ],\n  \"scripts\": {\n    \"build\": \"turbo run build\",\n    \"test\": \"turbo run test\",\n    \"lint\": \"turbo run lint\"\n  },\n  \"devDependencies\": {\n    \"turbo\": \"^1.0.0\",\n    \"eslint\": \"^8.0.0\",\n    \"typescript\": \"^5.0.0\"\n  }\n}\n\n// root/turbo.json\n{\n  \"pipeline\": {\n    \"build\": {\n      \"dependsOn\": [\"^build\"],\n      \"outputs\": [\"dist/**\"]\n    },\n    \"test\": {\n      \"dependsOn\": [\"^build\"]\n    },\n    \"lint\": {}\n  }\n}\n\n// Configuração única\n// Ferramentas centralizadas\n// Padrões consistentes"
  },
  {
    "file": "src/content/patterns/monorepo.tsx",
    "title": "Dependências internas",
    "description": "Exemplo de dependências internas no monorepo",
    "code": "// packages/ui/src/Button.tsx\n// Biblioteca de UI compartilhada\nimport { createStyles } from '@mantine/core';\n\nexport function Button({ children, variant = 'primary' }) {\n  const { classes } = useStyles();\n  \n  return (\n    <button className={`${classes.button} ${classes[variant]}`}>\n      {children}\n    </button>\n  );\n}\n\n// apps/web/package.json\n{\n  \"name\": \"@company/web\",\n  \"dependencies\": {\n    \"@company/ui\": \"workspace:*\",\n    \"@company/shared\": \"workspace:*\",\n    \"react\": \"^18.0.0\"\n  }\n}\n\n// apps/mobile/package.json\n{\n  \"name\": \"@company/mobile\",\n  \"dependencies\": {\n    \"@company/ui\": \"workspace:*\",\n    \"@company/shared\": \"workspace:*\",\n    \"react-native\": \"^0.70.0\"\n  }\n}\n\n// Dependências internas\n// Versões sincronizadas\n// Compartilhamento fácil"
  },
  {
    "file": "src/content/patterns/monorepo.tsx",
    "title": "Deploy coordenado",
    "description": "Exemplo de deploy coordenado no monorepo",
    "code": "// Um commit, múltiplos projetos\n\ngit add .\ngit commit -m \"feat: add new button component\"\ngit push origin main\n\n// CI/CD detecta mudanças\n// Builds todos os projetos afetados\n// Deploy coordenado\n\n// apps/web/package.json\n{\n  \"scripts\": {\n    \"build\": \"next build\",\n    \"deploy\": \"vercel --prod\"\n  }\n}\n\n// apps/mobile/package.json\n{\n  \"scripts\": {\n    \"build\": \"expo build\",\n    \"deploy\": \"expo publish\"\n  }\n}\n\n// .github/workflows/deploy.yml\nname: Deploy\non:\n  push:\n    branches: [main]\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n      - run: npm install\n      - run: npm run build\n      - run: npm run deploy\n\n// Deploy automático\n// Coordenação garantida\n// Menos trabalho manual"
  },
  {
    "file": "src/content/patterns/monorepo.tsx",
    "title": "Múltiplos repositórios",
    "description": "Exemplo de problemas com múltiplos repositórios",
    "code": "// ❌ RUIM - Múltiplos repositórios\n// Cada projeto em um repo separado\n\n// repo-1: @company/web\n// repo-2: @company/mobile\n// repo-3: @company/admin\n// repo-4: @company/api\n// repo-5: @company/shared\n\n// Problemas:\n// - Dependências duplicadas\n// - Versões descoordenadas\n// - Deploy manual\n// - Sincronização difícil\n// - Manutenção complexa\n\n// Exemplo de dependências duplicadas:\n// repo-1/package.json\n{\n  \"dependencies\": {\n    \"react\": \"^18.0.0\",\n    \"@mantine/core\": \"^6.0.0\"\n  }\n}\n\n// repo-2/package.json\n{\n  \"dependencies\": {\n    \"react\": \"^18.0.0\",\n    \"@mantine/core\": \"^6.0.0\"\n  }\n}\n\n// repo-3/package.json\n{\n  \"dependencies\": {\n    \"react\": \"^18.0.0\",\n    \"@mantine/core\": \"^6.0.0\"\n  }\n}\n\n// Mesmas dependências\n// Versões diferentes\n// Inconsistências\n// Manutenção difícil"
  },
  {
    "file": "src/content/patterns/monorepo.tsx",
    "title": "Repositórios separados",
    "description": "Exemplo de problemas com repositórios separados",
    "code": "// ❌ RUIM - Repositórios separados\n// Cada time tem seu próprio repo\n\n// frontend-team/repo\n// backend-team/repo\n// mobile-team/repo\n// design-system-team/repo\n\n// Problemas:\n// - Comunicação difícil\n// - Deploy descoordenado\n// - Dependências circulares\n// - Versões incompatíveis\n// - Refatoração complexa\n\n// Exemplo de deploy descoordenado:\n// frontend-team deploya às 14h\n// backend-team deploya às 15h\n// mobile-team deploya às 16h\n// design-system-team deploya às 17h\n\n// Resultado:\n// - Quebras de compatibilidade\n// - Bugs em produção\n// - Rollbacks constantes\n// - Time perdido\n\n// Exemplo de dependências circulares:\n// frontend depende do design-system\n// design-system depende do frontend\n// mobile depende do design-system\n// design-system depende do mobile\n\n// Círculo vicioso\n// Build quebra\n// Deploy falha"
  },
  {
    "file": "src/content/patterns/monorepo.tsx",
    "title": "Repositórios separados - Comunicação",
    "description": "Exemplo de problemas de comunicação com repositórios separados",
    "code": "// ❌ RUIM - Repositórios separados\n// Comunicação difícil entre times\n\n// Time A (frontend)\n// Precisa de mudança na API\n// Abre issue no repo do Time B\n// Espera 3 dias para resposta\n// Implementa workaround temporário\n// Deploy com bug\n\n// Time B (backend)\n// Não vê a issue\n// Trabalha em outras prioridades\n// Implementa mudança diferente\n// Deploy incompatível\n\n// Time C (mobile)\n// Espera mudança da API\n// Não sabe do status\n// Implementa solução própria\n// Deploy com inconsistência\n\n// Resultado:\n// - APIs incompatíveis\n// - Bugs em produção\n// - Tempo perdido\n// - Frustração dos times\n\n// Exemplo de incompatibilidade:\n// Frontend espera: { id, name, email }\n// Backend retorna: { id, name, email, phone }\n// Mobile espera: { id, name, email, phone, address }\n\n// Quebra em produção\n// Rollback necessário\n// Perda de confiança"
  },
  {
    "file": "src/content/patterns/monorepo.tsx",
    "title": "Monorepo bagunçado",
    "description": "Exemplo de monorepo mal organizado",
    "code": "// ❌ RUIM - Monorepo bagunçado\n// Sem estrutura clara\n// Sem regras\n// Sem organização\n\n// Estrutura caótica:\nmy-monorepo/\n├── app1/\n├── app2/\n├── lib1/\n├── lib2/\n├── utils/\n├── components/\n├── shared/\n├── common/\n├── core/\n├── base/\n├── foundation/\n├── helpers/\n├── tools/\n├── scripts/\n├── config/\n├── docs/\n└── ...\n\n// Problemas:\n// - Ninguém sabe onde está o que\n// - Dependências circulares\n// - Build lento\n// - Deploy confuso\n// - Manutenção impossível\n\n// Exemplo de dependências circulares:\n// app1 depende de lib1\n// lib1 depende de lib2\n// lib2 depende de app1\n\n// Build quebra\n// Deploy falha\n// Time perdido\n\n// Exemplo de estrutura confusa:\n// utils/format.js - usado por app1\n// helpers/format.js - usado por app2\n// shared/format.js - usado por app3\n\n// Código duplicado\n// Inconsistências\n// Manutenção difícil"
  },
  {
    "file": "src/content/patterns/monorepo.tsx",
    "title": "Dependências circulares",
    "description": "Exemplo de dependências circulares no monorepo",
    "code": "// ❌ RUIM - Dependências circulares\n// Pacotes dependem uns dos outros\n// Build quebra\n// Deploy falha\n\n// packages/ui/package.json\n{\n  \"name\": \"@company/ui\",\n  \"dependencies\": {\n    \"@company/shared\": \"workspace:*\"\n  }\n}\n\n// packages/shared/package.json\n{\n  \"name\": \"@company/shared\",\n  \"dependencies\": {\n    \"@company/ui\": \"workspace:*\"\n  }\n}\n\n// packages/web/package.json\n{\n  \"name\": \"@company/web\",\n  \"dependencies\": {\n    \"@company/ui\": \"workspace:*\",\n    \"@company/shared\": \"workspace:*\"\n  }\n}\n\n// Círculo: ui → shared → ui\n// Build quebra\n// Deploy falha\n// Time perdido\n\n// Exemplo de build quebrando:\n$ npm run build\n> @company/ui@1.0.0 build\n> @company/shared@1.0.0 build\n> @company/ui@1.0.0 build\n> @company/shared@1.0.0 build\n> @company/ui@1.0.0 build\n> @company/shared@1.0.0 build\n> ... (loop infinito)\n\n// Solução:\n// - Estrutura hierárquica clara\n// - Dependências unidirecionais\n// - Regras de dependência"
  },
  {
    "file": "src/content/patterns/monorepo.tsx",
    "title": "Build lento",
    "description": "Exemplo de build lento no monorepo",
    "code": "// ❌ RUIM - Build lento\n// Sem cache\n// Sem paralelização\n// Sem otimização\n\n// Build sequencial lento:\n$ npm run build\n> @company/shared@1.0.0 build (30s)\n> @company/ui@1.0.0 build (45s)\n> @company/web@1.0.0 build (60s)\n> @company/mobile@1.0.0 build (90s)\n> @company/admin@1.0.0 build (75s)\n> @company/api@1.0.0 build (120s)\n\n// Total: 420 segundos (7 minutos)\n\n// Problemas:\n// - Build demora muito\n// - Desenvolvimento lento\n// - Deploy lento\n// - CI/CD lento\n// - Time perdido\n\n// Exemplo de build sem cache:\n// Mudança em um arquivo\n// → Build completo\n// → 7 minutos perdidos\n// → Desenvolvimento lento\n\n// Exemplo de build sem paralelização:\n// 6 projetos\n// 1 CPU\n// Build sequencial\n// Tempo perdido\n\n// Solução:\n// - Cache inteligente\n// - Build paralelo\n// - Incremental builds"
  },
  {
    "file": "src/content/patterns/monorepo.tsx",
    "title": "Versões descoordenadas",
    "description": "Exemplo de versões descoordenadas no monorepo",
    "code": "// ❌ RUIM - Versões descoordenadas\n// Cada projeto com sua própria versão\n// Incompatibilidades\n// Bugs em produção\n\n// packages/ui/package.json\n{\n  \"name\": \"@company/ui\",\n  \"version\": \"1.2.3\"\n}\n\n// packages/shared/package.json\n{\n  \"name\": \"@company/shared\",\n  \"version\": \"2.1.0\"\n}\n\n// packages/web/package.json\n{\n  \"name\": \"@company/web\",\n  \"version\": \"3.0.1\"\n}\n\n// packages/mobile/package.json\n{\n  \"name\": \"@company/mobile\",\n  \"version\": \"1.5.2\"\n}\n\n// Problemas:\n// - Versões incompatíveis\n// - Bugs em produção\n// - Deploy descoordenado\n// - Manutenção difícil\n\n// Exemplo de incompatibilidade:\n// ui@1.2.3 espera shared@2.0.0\n// shared@2.1.0 quebra ui@1.2.3\n// web@3.0.1 usa ui@1.2.3\n// mobile@1.5.2 usa shared@2.1.0\n\n// Quebra em produção\n// Rollback necessário\n// Perda de confiança\n\n// Solução:\n// - Versionamento coordenado\n// - Lerna ou Nx\n// - Releases sincronizados"
  },
  {
    "file": "src/content/patterns/monorepo.tsx",
    "title": "Sem coordenação",
    "description": "Exemplo de falta de coordenação no monorepo",
    "code": "// ❌ RUIM - Sem coordenação\n// Times trabalham independentemente\n// Conflitos constantes\n// Deploy caótico\n\n// Time A (frontend)\n// Deploya às 10h\n// Quebra API\n// Rollback às 10h30\n\n// Time B (backend)\n// Deploya às 11h\n// Quebra frontend\n// Rollback às 11h30\n\n// Time C (mobile)\n// Deploya às 12h\n// Quebra tudo\n// Rollback às 12h30\n\n// Time D (admin)\n// Deploya às 13h\n// Quebra mobile\n// Rollback às 13h30\n\n// Resultado:\n// - 4 rollbacks em 1 dia\n// - Tempo perdido\n// - Frustração\n// - Perda de confiança\n\n// Exemplo de conflitos:\n// Time A: muda API de /users para /api/users\n// Time B: não sabe da mudança\n// Time C: usa API antiga\n// Time D: usa API nova\n\n// Quebra em produção\n// Bugs em cascata\n// Rollbacks em cascata\n\n// Solução:\n// - Comunicação clara\n// - Deploy coordenado\n// - Testes integrados"
  },
  {
    "file": "src/content/patterns/atomic-design.tsx",
    "title": "Organismo - Header",
    "description": "Exemplo de organismo combinando moléculas",
    "code": "// components/organisms/Header.tsx\nimport { Logo } from '../atoms/Logo';\nimport { NavBar } from '../molecules/NavBar';\n\nexport function Header() {\n  return (\n    <header>\n      <Logo />\n      <NavBar />\n    </header>\n  );\n}\n// Organismo: combina moléculas para formar uma seção maior"
  },
  {
    "file": "src/content/patterns/atomic-design.tsx",
    "title": "Template - Página de Produto",
    "description": "Exemplo de template com placeholders para organismos",
    "code": "// components/templates/ProductPageTemplate.tsx\nimport { Header } from '../organisms/Header';\nimport { ProductList } from '../organisms/ProductList';\nimport { Footer } from '../organisms/Footer';\n\nexport function ProductPageTemplate({ children }) {\n  return (\n    <div>\n      <Header />\n      <main>{children}</main>\n      <Footer />\n    </div>\n  );\n}\n// Template: estrutura da página, sem conteúdo real"
  },
  {
    "file": "src/content/patterns/atomic-design.tsx",
    "title": "Página - Produto Real",
    "description": "Exemplo de página real usando o template",
    "code": "// pages/ProductPage.tsx\nimport { ProductPageTemplate } from '../templates/ProductPageTemplate';\nimport { ProductDetails } from '../organisms/ProductDetails';\n\nexport default function ProductPage() {\n  return (\n    <ProductPageTemplate>\n      <ProductDetails productId=\"123\" />\n    </ProductPageTemplate>\n  );\n}\n// Página: instancia o template com conteúdo real"
  }
] 