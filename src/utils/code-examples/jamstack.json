[
  {
    "id": "jamstack-javascript-client",
    "title": "JavaScript - Interatividade no Cliente",
    "description": "JavaScript adiciona interatividade aos sites est√°ticos.",
    "content": "// React component para interatividade\nfunction ProductCard({ product }) {\n  const [isLiked, setIsLiked] = useState(false);\n  const [quantity, setQuantity] = useState(1);\n\n  const handleAddToCart = async () => {\n    // API call para adicionar ao carrinho\n    await fetch('/api/cart', {\n      method: 'POST',\n      body: JSON.stringify({ productId: product.id, quantity })\n    });\n  };\n\n  return (\n    <div className=\"product-card\">\n      <img src={product.image} alt={product.name} />\n      <h3>{product.name}</h3>\n      <p>R$ {product.price}</p>\n      <button onClick={handleAddToCart}>\n        Adicionar ao Carrinho\n      </button>\n      <button onClick={() => setIsLiked(!isLiked)}>\n        {isLiked ? '‚ù§Ô∏è' : 'ü§ç'}\n      </button>\n    </div>\n  );\n}\n\n// JavaScript adiciona interatividade\n// Sem servidor para processar\n// Performance m√°xima"
  },
  {
    "id": "jamstack-apis",
    "title": "APIs - Dados e Funcionalidades",
    "description": "APIs fornecem dados e funcionalidades para sites est√°ticos.",
    "content": "// API para produtos\n// api/products.js\nexport async function getProducts() {\n  return [\n    { id: 1, name: 'Produto 1', price: 99.99 },\n    { id: 2, name: 'Produto 2', price: 149.99 }\n  ];\n}\n\n// API para carrinho\n// api/cart.js\nexport async function addToCart(productId, quantity) {\n  // L√≥gica de adicionar ao carrinho\n  return { success: true };\n}\n\n// Serverless function\n// netlify/functions/checkout.js\nexports.handler = async (event) => {\n  const { items } = JSON.parse(event.body);\n  \n  // Processar checkout\n  return {\n    statusCode: 200,\n    body: JSON.stringify({ orderId: '123' })\n  };\n};\n\n// APIs isoladas\n// F√°cil de escalar\n// Seguran√ßa de sobra"
  },
  {
    "id": "jamstack-html-prerendered",
    "title": "Markup - HTML Pr√©-renderizado",
    "description": "HTML pr√©-renderizado servido por CDN.",
    "content": "<!-- HTML pr√©-renderizado pelo Gatsby -->\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Meu E-commerce</title>\n  <meta name=\"description\" content=\"Produtos incr√≠veis\" />\n</head>\n<body>\n  <header>\n    <nav>\n      <a href=\"/\">Home</a>\n      <a href=\"/produtos\">Produtos</a>\n      <a href=\"/carrinho\">Carrinho</a>\n    </nav>\n  </header>\n  \n  <main>\n    <div class=\"products-grid\">\n      <div class=\"product-card\">\n        <img src=\"/produto1.jpg\" alt=\"Produto 1\" />\n        <h3>Produto 1</h3>\n        <p>R$ 99,99</p>\n        <button>Adicionar ao Carrinho</button>\n      </div>\n    </div>\n  </main>\n  \n  <script src=\"/app.js\"></script>\n</body>\n</html>\n\n<!-- Servido por CDN -->\n<!-- Performance m√°xima -->\n<!-- SEO otimizado -->"
  },
  {
    "id": "jamstack-pitfall-wrong-use",
    "title": "Over-engineering - Usando JAMstack para tudo",
    "description": "Usando JAMstack em cen√°rios inadequados.",
    "content": "// ‚ùå RUIM - JAMstack para aplica√ß√£o complexa\n// Aplica√ß√£o de gest√£o empresarial\nfunction ERPApp() {\n  return (\n    <div>\n      <ComplexDashboard />\n      <RealTimeCharts />\n      <MultiUserCollaboration />\n      <LegacySystemIntegration />\n    </div>\n  );\n}\n\n// Problemas:\n// - Dados em tempo real\n// - Autentica√ß√£o complexa\n// - Integra√ß√£o com sistemas legados\n// - L√≥gica de neg√≥cio pesada\n\n// ‚úÖ BOM - JAMstack para site de conte√∫do\nfunction BlogApp() {\n  return (\n    <div>\n      <ArticleList />\n      <ContactForm />\n      <NewsletterSignup />\n    </div>\n  );\n}\n\n// Adequado para:\n// - Conte√∫do est√°tico\n// - Performance cr√≠tica\n// - SEO importante"
  },
  {
    "id": "jamstack-pitfall-slow-build",
    "title": "Build Time Excessivo",
    "description": "Build demora horas, deploy lento.",
    "content": "// ‚ùå RUIM - Build lento\n// gatsby-config.js\nexports.createPages = async ({ graphql, actions }) => {\n  const { createPage } = actions;\n  \n  // Gerar 10.000 p√°ginas\n  for (let i = 0; i < 10000; i++) {\n    createPage({\n      path: `/produto/${i}`,\n      component: path.resolve('./src/templates/Product.js'),\n      context: { id: i }\n    });\n  }\n};\n\n// Build demora 2 horas\n// Deploy lento\n// Desenvolvimento travado\n\n// ‚úÖ BOM - Build otimizado\n// next.config.js\nmodule.exports = {\n  experimental: {\n    incrementalStaticRegeneration: true\n  },\n  async generateStaticParams() {\n    // Gerar s√≥ p√°ginas populares\n    return popularProducts.map(product => ({\n      id: product.id\n    }));\n  }\n};\n\n// ISR para p√°ginas din√¢micas\n// Build r√°pido\n// Deploy incremental"
  },
  {
    "id": "jamstack-pitfall-dynamic-content",
    "title": "Conte√∫do Din√¢mico",
    "description": "Conte√∫do que muda frequentemente.",
    "content": "// ‚ùå RUIM - Build a cada mudan√ßa\n// Pre√ßos mudam a cada hora\nfunction ProductPage({ product }) {\n  return (\n    <div>\n      <h1>{product.name}</h1>\n      <p>Pre√ßo: R$ {product.price}</p> {/* Muda a cada hora */}\n      <p>Estoque: {product.stock}</p> {/* Muda constantemente */}\n    </div>\n  );\n}\n\n// Build necess√°rio a cada mudan√ßa\n// Deploy constante\n// Performance ruim\n\n// ‚úÖ BOM - ISR ou client-side\n// next.config.js\nmodule.exports = {\n  async getStaticProps() {\n    return {\n      props: {\n        product: await getProduct()\n      },\n      revalidate: 3600 // Revalida a cada hora\n    };\n  }\n};\n\n// Ou client-side fetching\nfunction ProductPage({ product }) {\n  const [currentPrice, setCurrentPrice] = useState(product.price);\n  \n  useEffect(() => {\n    // Busca pre√ßo atualizado\n    fetchPrice(product.id).then(setCurrentPrice);\n  }, []);\n  \n  return <p>Pre√ßo: R$ {currentPrice}</p>;\n}"
  },
  {
    "id": "jamstack-pitfall-seo-issues",
    "title": "Problemas de SEO",
    "description": "JavaScript renderiza conte√∫do, crawlers n√£o veem.",
    "content": "// ‚ùå RUIM - JavaScript renderiza tudo\nfunction ProductPage() {\n  const [product, setProduct] = useState(null);\n  \n  useEffect(() => {\n    // Dados carregados via JavaScript\n    fetchProduct().then(setProduct);\n  }, []);\n  \n  if (!product) return <Loading />;\n  \n  return (\n    <div>\n      <h1>{product.name}</h1>\n      <p>{product.description}</p>\n    </div>\n  );\n}\n\n// Crawlers n√£o veem conte√∫do\n// SEO ruim\n// Performance ruim\n\n// ‚úÖ BOM - Pre-renderiza√ß√£o\n// next.config.js\nexport async function getStaticProps() {\n  const product = await getProduct();\n  \n  return {\n    props: {\n      product\n    }\n  };\n}\n\n// pages/produto/[id].js\nfunction ProductPage({ product }) {\n  return (\n    <div>\n      <h1>{product.name}</h1>\n      <p>{product.description}</p>\n    </div>\n  );\n}\n\n// HTML pr√©-renderizado\n// Crawlers veem tudo\n// SEO otimizado"
  },
  {
    "id": "jamstack-pitfall-api-complexity",
    "title": "Complexidade de APIs",
    "description": "Muitas APIs, integra√ß√£o complexa.",
    "content": "// ‚ùå RUIM - Muitas APIs\nfunction ProductPage() {\n  const [product, setProduct] = useState(null);\n  const [reviews, setReviews] = useState([]);\n  const [stock, setStock] = useState(null);\n  const [pricing, setPricing] = useState(null);\n  \n  useEffect(() => {\n    // M√∫ltiplas chamadas de API\n    Promise.all([\n      fetch('/api/products/1'),\n      fetch('/api/reviews/1'),\n      fetch('/api/stock/1'),\n      fetch('/api/pricing/1')\n    ]).then(([product, reviews, stock, pricing]) => {\n      setProduct(product);\n      setReviews(reviews);\n      setStock(stock);\n      setPricing(pricing);\n    });\n  }, []);\n}\n\n// Complexidade de integra√ß√£o\n// Dif√≠cil de debugar\n// Performance ruim\n\n// ‚úÖ BOM - BFF ou GraphQL\n// GraphQL - Uma query\nconst PRODUCT_QUERY = `\n  query Product($id: ID!) {\n    product(id: $id) {\n      name\n      description\n      price\n      reviews {\n        text\n        rating\n      }\n      stock {\n        quantity\n      }\n    }\n  }\n`;\n\n// Ou BFF (Backend for Frontend)\n// api/product-page.js\nexport async function getProductPageData(id) {\n  const [product, reviews, stock, pricing] = await Promise.all([\n    getProduct(id),\n    getReviews(id),\n    getStock(id),\n    getPricing(id)\n  ]);\n  \n  return { product, reviews, stock, pricing };\n}\n\n// Uma chamada de API\n// F√°cil de manter\n// Performance otimizada"
  },
  {
    "title": "WordPress tradicional",
    "description": "Blog com servidor PHP, performance lenta.",
    "code": "<!-- WordPress tradicional -->\n<!-- index.php -->\n<?php\n  // Servidor PHP processa cada requisi√ß√£o\n  $posts = get_posts();\n  $categories = get_categories();\n  $user = wp_get_current_user();\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n  <title><?php echo get_bloginfo('name'); ?></title>\n</head>\n<body>\n  <header>\n    <nav>\n      <?php foreach($categories as $cat): ?>\n        <a href=\"<?php echo get_category_link($cat->term_id); ?>\">\n          <?php echo $cat->name; ?>\n        </a>\n      <?php endforeach; ?>\n    </nav>\n  </header>\n  \n  <main>\n    <?php foreach($posts as $post): ?>\n      <article>\n        <h2><?php echo $post->post_title; ?></h2>\n        <p><?php echo $post->post_excerpt; ?></p>\n        <a href=\"<?php echo get_permalink($post->ID); ?>\">Ler mais</a>\n      </article>\n    <?php endforeach; ?>\n  </main>\n</body>\n</html>\n\n<!-- Problemas:\n- Servidor processa cada requisi√ß√£o\n- Performance lenta\n- Vulnerabilidades de seguran√ßa\n- Dif√≠cil de escalar\n- Custo alto de hosting -->"
  },
  {
    "title": "E-commerce tradicional",
    "description": "E-commerce com servidor, performance cr√≠tica.",
    "code": "<!-- E-commerce tradicional -->\n<!-- product.php -->\n<?php\n  // Servidor processa cada requisi√ß√£o\n  $product = get_product($_GET['id']);\n  $related_products = get_related_products($product->category_id);\n  $user_cart = get_user_cart($_SESSION['user_id']);\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n  <title><?php echo $product->name; ?></title>\n</head>\n<body>\n  <header>\n    <nav>\n      <a href=\"/cart\">Carrinho (<?php echo count($user_cart); ?>)</a>\n    </nav>\n  </header>\n  \n  <main>\n    <div class=\"product\">\n      <img src=\"<?php echo $product->image; ?>\" />\n      <h1><?php echo $product->name; ?></h1>\n      <p class=\"price\">R$ <?php echo $product->price; ?></p>\n      <p class=\"stock\">Estoque: <?php echo $product->stock; ?></p>\n      \n      <form method=\"POST\" action=\"/add-to-cart\">\n        <input type=\"hidden\" name=\"product_id\" value=\"<?php echo $product->id; ?>\" />\n        <button type=\"submit\">Adicionar ao Carrinho</button>\n      </form>\n    </div>\n    \n    <div class=\"related-products\">\n      <?php foreach($related_products as $related): ?>\n        <div class=\"product-card\">\n          <img src=\"<?php echo $related->image; ?>\" />\n          <h3><?php echo $related->name; ?></h3>\n          <p>R$ <?php echo $related->price; ?></p>\n        </div>\n      <?php endforeach; ?>\n    </div>\n  </main>\n</body>\n</html>\n\n<!-- Problemas:\n- Servidor lento\n- Abandono de carrinho\n- SEO ruim\n- Dif√≠cil de escalar\n- Custo alto -->"
  },
  {
    "title": "Portfolio complexo",
    "description": "Portfolio com complexidade desnecess√°ria.",
    "code": "<!-- Portfolio complexo -->\n<!-- index.php -->\n<?php\n  // Complexidade desnecess√°ria\n  $projects = get_projects();\n  $skills = get_skills();\n  $testimonials = get_testimonials();\n  $contact_form = get_contact_form();\n  $analytics = get_analytics();\n  $seo = get_seo_data();\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n  <title><?php echo $seo->title; ?></title>\n  <meta name=\"description\" content=\"<?php echo $seo->description; ?>\" />\n</head>\n<body>\n  <header>\n    <nav>\n      <a href=\"#home\">Home</a>\n      <a href=\"#projects\">Projetos</a>\n      <a href=\"#skills\">Skills</a>\n      <a href=\"#contact\">Contato</a>\n    </nav>\n  </header>\n  \n  <main>\n    <section id=\"home\">\n      <h1>Meu Portfolio</h1>\n      <p>Desenvolvedor Full Stack</p>\n    </section>\n    \n    <section id=\"projects\">\n      <h2>Projetos</h2>\n      <?php foreach($projects as $project): ?>\n        <div class=\"project\">\n          <img src=\"<?php echo $project->image; ?>\" />\n          <h3><?php echo $project->name; ?></h3>\n          <p><?php echo $project->description; ?></p>\n        </div>\n      <?php endforeach; ?>\n    </section>\n    \n    <section id=\"skills\">\n      <h2>Skills</h2>\n      <?php foreach($skills as $skill): ?>\n        <div class=\"skill\">\n          <span><?php echo $skill->name; ?></span>\n          <div class=\"progress\">\n            <div style=\"width: <?php echo $skill->level; ?>%\"></div>\n          </div>\n        </div>\n      <?php endforeach; ?>\n    </section>\n    \n    <section id=\"contact\">\n      <h2>Contato</h2>\n      <form method=\"POST\" action=\"/contact\">\n        <input type=\"text\" name=\"name\" placeholder=\"Nome\" required />\n        <input type=\"email\" name=\"email\" placeholder=\"Email\" required />\n        <textarea name=\"message\" placeholder=\"Mensagem\" required></textarea>\n        <button type=\"submit\">Enviar</button>\n      </form>\n    </section>\n  </main>\n  \n  <footer>\n    <p>&copy; 2024 Meu Portfolio</p>\n  </footer>\n</body>\n</html>\n\n<!-- Problemas:\n- Complexidade desnecess√°ria\n- Custo alto\n- Manuten√ß√£o dif√≠cil\n- Performance ruim\n- Over-engineering -->"
  }
] 