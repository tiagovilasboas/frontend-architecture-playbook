[
  {
    "title": "Lógica de Negócio Duplicada",
    "description": "Regras de negócio repetidas em múltiplos lugares",
    "code": "// ❌ RUIM - Lógica de negócio duplicada\n\n// Componente de checkout\nconst CheckoutForm = ({ user, cart }) => {\n  const calculateTotal = () => {\n    let total = cart.items.reduce((sum, item) => sum + item.price, 0);\n    \n    // Lógica de negócio duplicada: desconto para usuários premium\n    if (user.type === 'premium') {\n      total = total * 0.9; // 10% desconto\n    }\n    \n    // Lógica de negócio duplicada: frete grátis acima de R$ 100\n    if (total < 100) {\n      total += 15; // frete\n    }\n    \n    return total;\n  };\n  \n  return <div>Total: R$ {calculateTotal()}</div>;\n};\n\n// Componente de resumo do pedido\nconst OrderSummary = ({ user, items }) => {\n  const calculateTotal = () => {\n    let total = items.reduce((sum, item) => sum + item.price, 0);\n    \n    // MESMA LÓGICA DUPLICADA\n    if (user.type === 'premium') {\n      total = total * 0.9;\n    }\n    \n    if (total < 100) {\n      total += 15;\n    }\n    \n    return total;\n  };\n  \n  return <div>Total: R$ {calculateTotal()}</div>;\n};\n\n// Componente de carrinho\nconst CartWidget = ({ user, items }) => {\n  const calculateTotal = () => {\n    let total = items.reduce((sum, item) => sum + item.price, 0);\n    \n    // MESMA LÓGICA DUPLICADA NOVAMENTE\n    if (user.type === 'premium') {\n      total = total * 0.9;\n    }\n    \n    if (total < 100) {\n      total += 15;\n    }\n    \n    return total;\n  };\n  \n  return <div>R$ {calculateTotal()}</div>;\n};"
  },
  {
    "title": "Lógica de Negócio Centralizada",
    "description": "Regras de negócio em um lugar só",
    "code": "// ✅ BOM - Lógica de negócio centralizada\n\n// services/pricing.ts - Lógica de negócio centralizada\nexport const calculateOrderTotal = (user: User, items: CartItem[]): number => {\n  let total = items.reduce((sum, item) => sum + item.price, 0);\n  \n  // Regras de negócio em um lugar só\n  if (user.type === 'premium') {\n    total = total * 0.9; // 10% desconto para premium\n  }\n  \n  if (total < 100) {\n    total += 15; // frete grátis acima de R$ 100\n  }\n  \n  return total;\n};\n\n// Componentes usam a lógica centralizada\nconst CheckoutForm = ({ user, cart }) => {\n  const total = calculateOrderTotal(user, cart.items);\n  return <div>Total: R$ {total}</div>;\n};\n\nconst OrderSummary = ({ user, items }) => {\n  const total = calculateOrderTotal(user, items);\n  return <div>Total: R$ {total}</div>;\n};\n\nconst CartWidget = ({ user, items }) => {\n  const total = calculateOrderTotal(user, items);\n  return <div>R$ {total}</div>;\n};"
  },
  {
    "title": "Validações de Negócio Duplicadas",
    "description": "Regras de validação repetidas em múltiplos formulários",
    "code": "// ❌ RUIM - Validações de negócio duplicadas\n\n// Formulário de cadastro\nconst SignupForm = () => {\n  const validateForm = (data) => {\n    const errors = {};\n    \n    // Lógica de negócio duplicada: validação de CPF\n    if (data.cpf) {\n      const cpf = data.cpf.replace(/[^0-9]/g, '');\n      if (cpf.length !== 11) {\n        errors.cpf = 'CPF inválido';\n      }\n      // Validação complexa de CPF...\n    }\n    \n    // Lógica de negócio duplicada: validação de idade\n    if (data.birthDate) {\n      const age = new Date().getFullYear() - new Date(data.birthDate).getFullYear();\n      if (age < 18) {\n        errors.birthDate = 'Deve ser maior de 18 anos';\n      }\n    }\n    \n    return errors;\n  };\n};\n\n// Formulário de perfil\nconst ProfileForm = () => {\n  const validateForm = (data) => {\n    const errors = {};\n    \n    // MESMA LÓGICA DUPLICADA\n    if (data.cpf) {\n      const cpf = data.cpf.replace(/[^0-9]/g, '');\n      if (cpf.length !== 11) {\n        errors.cpf = 'CPF inválido';\n      }\n    }\n    \n    if (data.birthDate) {\n      const age = new Date().getFullYear() - new Date(data.birthDate).getFullYear();\n      if (age < 18) {\n        errors.birthDate = 'Deve ser maior de 18 anos';\n      }\n    }\n    \n    return errors;\n  };\n};"
  },
  {
    "title": "Validações Centralizadas",
    "description": "Regras de validação em um lugar só",
    "code": "// ✅ BOM - Validações centralizadas\n\n// utils/validations.ts - Regras de negócio centralizadas\nexport const validateCPF = (cpf: string): boolean => {\n  const cleanCPF = cpf.replace(/[^0-9]/g, '');\n  if (cleanCPF.length !== 11) return false;\n  \n  // Lógica complexa de validação de CPF\n  // ...\n  return true;\n};\n\nexport const validateAge = (birthDate: string): boolean => {\n  const age = new Date().getFullYear() - new Date(birthDate).getFullYear();\n  return age >= 18;\n};\n\nexport const validateUserData = (data: UserData) => {\n  const errors = {};\n  \n  if (data.cpf && !validateCPF(data.cpf)) {\n    errors.cpf = 'CPF inválido';\n  }\n  \n  if (data.birthDate && !validateAge(data.birthDate)) {\n    errors.birthDate = 'Deve ser maior de 18 anos';\n  }\n  \n  return errors;\n};\n\n// Formulários usam as validações centralizadas\nconst SignupForm = () => {\n  const handleSubmit = (data) => {\n    const errors = validateUserData(data);\n    // ...\n  };\n};\n\nconst ProfileForm = () => {\n  const handleSubmit = (data) => {\n    const errors = validateUserData(data);\n    // ...\n  };\n};"
  }
] 