import { Title, Text, Stack, Paper, Alert, List, ThemeIcon, Group, Card, Badge } from '@mantine/core';
import { IconBulb, IconAlertTriangle, IconCheck, IconCode, IconSettings, IconBolt } from '@tabler/icons-react';
import CodeExample from '../../components/CodeExample';
import stateMachinesExamples from '../../utils/code-examples/state-machines.json';

function StateMachines() {
  return (
    <Stack gap="xl">
      {/* Hero Section */}
      <div>
        <Title order={1} mb="md">
          State Machines
        </Title>
        <Text size="lg" c="dimmed">
          Estados previs√≠veis, transi√ß√µes claras, bugs imposs√≠veis. 
          L√≥gica de neg√≥cio organizada, comportamento controlado.
        </Text>
      </div>

      {/* What is it */}
      <Paper withBorder p="xl" radius="md">
        <Stack gap="md">
          <Group>
            <ThemeIcon size={50} radius="md" variant="light" color="blue">
              <IconSettings size={25} />
            </ThemeIcon>
            <div>
              <Title order={3}>O que √©?</Title>
              <Text c="dimmed">M√°quinas de estado para controlar comportamento da aplica√ß√£o</Text>
            </div>
          </Group>
          
          <Text>
            State Machines √© sobre uma coisa s√≥: <strong>estados previs√≠veis</strong>.
          </Text>
          
          <Text>
            Pensa assim: ao inv√©s de vari√°veis soltas e l√≥gica espalhada, 
            voc√™ tem estados bem definidos e transi√ß√µes claras. 
            Cada estado tem comportamentos espec√≠ficos, cada transi√ß√£o tem regras.
          </Text>
          
          <Text>
            A regra √© simples: <em>estado atual + evento = pr√≥ximo estado</em>. 
            Sem surpresas, sem bugs imposs√≠veis, comportamento controlado.
          </Text>
        </Stack>
      </Paper>

      {/* Concepts */}
      <div>
        <Title order={2} mb="lg">
                      <IconBolt size={28} style={{ verticalAlign: 'middle', marginRight: '8px' }} />
          Os 3 Conceitos Principais
        </Title>
        
        <Stack gap="md">
          <Card withBorder p="md">
            <Group>
              <Badge size="lg" variant="light" color="green">1</Badge>
              <div>
                <Title order={4}>Estados</Title>
                <Text size="sm" c="dimmed">
                  Condi√ß√µes bem definidas da aplica√ß√£o. 
                  Cada estado tem comportamentos espec√≠ficos.
                </Text>
                <Stack gap="xl">
                  {stateMachinesExamples.map(example => (
                    <CodeExample
                      key={example.id}
                      title={example.title}
                      description={example.description}
                      code={example.content}
                     
                    />
                  ))}
                </Stack>
              </div>
            </Group>
          </Card>

          <Card withBorder p="md">
            <Group>
              <Badge size="lg" variant="light" color="blue">2</Badge>
              <div>
                <Title order={4}>Eventos</Title>
                <Text size="sm" c="dimmed">
                  A√ß√µes que causam transi√ß√µes. 
                  Cada evento pode mudar o estado.
                </Text>
                <Stack gap="xl">
                  {stateMachinesExamples.map(example => (
                    <CodeExample
                      key={example.id}
                      title={example.title}
                      description={example.description}
                      code={example.content}
                     
                    />
                  ))}
                </Stack>
              </div>
            </Group>
          </Card>

          <Card withBorder p="md">
            <Group>
              <Badge size="lg" variant="light" color="orange">3</Badge>
              <div>
                <Title order={4}>Transi√ß√µes</Title>
                <Text size="sm" c="dimmed">
                  Regras que definem como mudar de estado. 
                  Cada transi√ß√£o tem condi√ß√µes e a√ß√µes.
                </Text>
                <Stack gap="xl">
                  {stateMachinesExamples.map(example => (
                    <CodeExample
                      key={example.id}
                      title={example.title}
                      description={example.description}
                      code={example.content}
                     
                    />
                  ))}
                </Stack>
              </div>
            </Group>
          </Card>
        </Stack>
      </div>

      {/* Benefits */}
      <div>
        <Title order={2} mb="lg">
          <IconCheck size={28} style={{ verticalAlign: 'middle', marginRight: '8px' }} />
          Por que vale a pena?
        </Title>
        
        <Stack gap="md">
          <Card withBorder p="md">
            <Group>
              <ThemeIcon size={40} radius="md" variant="light" color="green">
                <IconBolt size={20} />
              </ThemeIcon>
              <div>
                <Title order={4}>Comportamento Previs√≠vel</Title>
                <Text size="sm">
                  Estados bem definidos, transi√ß√µes claras. 
                  Sem surpresas, sem bugs imposs√≠veis.
                </Text>
              </div>
            </Group>
          </Card>

          <Card withBorder p="md">
            <Group>
              <ThemeIcon size={40} radius="md" variant="light" color="blue">
                <IconSettings size={20} />
              </ThemeIcon>
              <div>
                <Title order={4}>L√≥gica Organizada</Title>
                <Text size="sm">
                  Comportamento centralizado, regras claras. 
                  F√°cil de entender e manter.
                </Text>
              </div>
            </Group>
          </Card>

          <Card withBorder p="md">
            <Group>
              <ThemeIcon size={40} radius="md" variant="light" color="purple">
                <IconBulb size={20} />
              </ThemeIcon>
              <div>
                <Title order={4}>Testabilidade</Title>
                <Text size="sm">
                  Estados isolados, transi√ß√µes test√°veis. 
                  Cobertura de testes completa.
                </Text>
              </div>
            </Group>
          </Card>
        </Stack>
      </div>

      {/* When to use */}
      <div>
        <Title order={2} mb="lg">
          <IconAlertTriangle size={28} style={{ verticalAlign: 'middle', marginRight: '8px' }} />
          Quando usar?
        </Title>
        
        <Stack gap="md">
          <Alert variant="light" color="green" title="‚úÖ Use quando:">
            <List>
              <List.Item>Formul√°rios complexos</List.Item>
              <List.Item>Wizards/multi-step flows</List.Item>
              <List.Item>Autentica√ß√£o e autoriza√ß√£o</List.Item>
              <List.Item>Upload de arquivos</List.Item>
              <List.Item>Processos de pagamento</List.Item>
            </List>
          </Alert>

          <Alert variant="light" color="red" title="‚ùå Evite quando:">
            <List>
              <List.Item>L√≥gica simples (over-engineering)</List.Item>
              <List.Item>Estados independentes</List.Item>
              <List.Item>Comportamento linear</List.Item>
              <List.Item>Prot√≥tipos r√°pidos</List.Item>
            </List>
          </Alert>
        </Stack>
      </div>

      {/* Real Examples */}
      <div>
        <Title order={2} mb="lg">
          <IconCode size={28} style={{ verticalAlign: 'middle', marginRight: '8px' }} />
          Exemplos Pr√°ticos no Front-End
        </Title>
        
        <Stack gap="xl">
          {/* Example 1: Form */}
          <Paper withBorder p="xl" radius="md">
            <Title order={3} mb="md">üìù Formul√°rio - Estados Complexos</Title>
            
            <Stack gap="md">
              <Text>
                <strong>Cen√°rio:</strong> Formul√°rio com valida√ß√£o, 
                envio ass√≠ncrono, feedback visual. Estados complexos.
                <br />
                <strong>Problema:</strong> Estados confusos, bugs imposs√≠veis, 
                UX inconsistente.
              </Text>
              
              <Stack gap="xl">
                {stateMachinesExamples.map(example => (
                  <CodeExample
                    key={example.id}
                    title={example.title}
                    description={example.description}
                    code={example.content}
                   
                  />
                ))}
              </Stack>
            </Stack>
          </Paper>

          {/* Example 2: Authentication */}
          <Paper withBorder p="xl" radius="md">
            <Title order={3} mb="md">üîê Autentica√ß√£o - Estados de Login</Title>
            
            <Stack gap="md">
              <Text>
                <strong>Cen√°rio:</strong> Sistema de autentica√ß√£o com login, 
                logout, refresh token. Estados complexos de sess√£o.
                <br />
                <strong>Problema:</strong> Estados de sess√£o confusos, 
                race conditions, bugs de seguran√ßa.
              </Text>
              
              <Stack gap="xl">
                {stateMachinesExamples.map(example => (
                  <CodeExample
                    key={example.id}
                    title={example.title}
                    description={example.description}
                    code={example.content}
                   
                  />
                ))}
              </Stack>
            </Stack>
          </Paper>

          {/* Example 3: File Upload */}
          <Paper withBorder p="xl" radius="md">
            <Title order={3} mb="md">üìÅ Upload de Arquivos - Estados de Progresso</Title>
            
            <Stack gap="md">
              <Text>
                <strong>Cen√°rio:</strong> Upload de arquivos com progresso, 
                valida√ß√£o, retry. Estados complexos de upload.
                <br />
                <strong>Problema:</strong> Estados de upload confusos, 
                progresso inconsistente, UX ruim.
              </Text>
              
              <Stack gap="xl">
                {stateMachinesExamples.map(example => (
                  <CodeExample
                    key={example.id}
                    title={example.title}
                    description={example.description}
                    code={example.content}
                   
                  />
                ))}
              </Stack>
            </Stack>
          </Paper>
        </Stack>
      </div>

      {/* Pitfalls & How to Avoid */}
      <div>
        <Title order={2} mb="lg">
          <IconAlertTriangle size={28} style={{ verticalAlign: 'middle', marginRight: '8px' }} />
          Armadilhas & Como Evitar
        </Title>
        
        <Stack gap="xl">
          {/* Over-engineering */}
          <Paper withBorder p="xl" radius="md">
            <Title order={3} mb="md">üö´ Over-engineering</Title>
            <Stack gap="md">
              <Text>
                <strong>Problema:</strong> Voc√™ usa state machine pra tudo. 
                L√≥gica simples vira complexidade desnecess√°ria.
              </Text>
              
              <Text>
                <strong>Como evitar:</strong> Use state machines s√≥ quando estados s√£o complexos. 
                L√≥gica simples n√£o precisa de state machine.
              </Text>
              
              <Stack gap="xl">
                {stateMachinesExamples.map(example => (
                  <CodeExample
                    key={example.id}
                    title={example.title}
                    description={example.description}
                    code={example.content}
                   
                  />
                ))}
              </Stack>
            </Stack>
          </Paper>

          {/* Complex Transitions */}
          <Paper withBorder p="xl" radius="md">
            <Title order={3} mb="md">üîÑ Transi√ß√µes Complexas</Title>
            <Stack gap="md">
              <Text>
                <strong>Problema:</strong> Transi√ß√µes com muitas condi√ß√µes, 
                l√≥gica complexa, dif√≠cil de entender.
              </Text>
              
              <Text>
                <strong>Como evitar:</strong> Mantenha transi√ß√µes simples, 
                use guards para condi√ß√µes complexas.
              </Text>
              
              <Stack gap="xl">
                {stateMachinesExamples.map(example => (
                  <CodeExample
                    key={example.id}
                    title={example.title}
                    description={example.description}
                    code={example.content}
                   
                  />
                ))}
              </Stack>
            </Stack>
          </Paper>

          {/* State Explosion */}
          <Paper withBorder p="xl" radius="md">
            <Title order={3} mb="md">üí• Explos√£o de Estados</Title>
            <Stack gap="md">
              <Text>
                <strong>Problema:</strong> Muitos estados, transi√ß√µes complexas, 
                m√°quina dif√≠cil de manter.
              </Text>
              
              <Text>
                <strong>Como evitar:</strong> Agrupe estados relacionados, 
                use hierarquia, simplifique.
              </Text>
              
              <Stack gap="xl">
                {stateMachinesExamples.map(example => (
                  <CodeExample
                    key={example.id}
                    title={example.title}
                    description={example.description}
                    code={example.content}
                   
                  />
                ))}
              </Stack>
            </Stack>
          </Paper>

          {/* Side Effects */}
          <Paper withBorder p="xl" radius="md">
            <Title order={3} mb="md">‚ö° Side Effects</Title>
            <Stack gap="md">
              <Text>
                <strong>Problema:</strong> Side effects misturados com transi√ß√µes, 
                l√≥gica espalhada, dif√≠cil de testar.
              </Text>
              
              <Text>
                <strong>Como evitar:</strong> Use actions para side effects, 
                mantenha transi√ß√µes puras.
              </Text>
              
              <Stack gap="xl">
                {stateMachinesExamples.map(example => (
                  <CodeExample
                    key={example.id}
                    title={example.title}
                    description={example.description}
                    code={example.content}
                   
                  />
                ))}
              </Stack>
            </Stack>
          </Paper>

          {/* Testing */}
          <Paper withBorder p="xl" radius="md">
            <Title order={3} mb="md">üß™ Testes</Title>
            <Stack gap="md">
              <Text>
                <strong>Problema:</strong> State machines dif√≠ceis de testar, 
                cobertura baixa, bugs n√£o detectados.
              </Text>
              
              <Text>
                <strong>Como evitar:</strong> Teste cada transi√ß√£o, 
                use ferramentas de testing espec√≠ficas.
              </Text>
              
              <Stack gap="xl">
                {stateMachinesExamples.map(example => (
                  <CodeExample
                    key={example.id}
                    title={example.title}
                    description={example.description}
                    code={example.content}
                   
                  />
                ))}
              </Stack>
            </Stack>
          </Paper>
        </Stack>
      </div>

      {/* References & Real Cases */}
      <div>
        <Title order={2} mb="lg">
          <IconBulb size={28} style={{ verticalAlign: 'middle', marginRight: '8px' }} />
          Refer√™ncias & Casos Reais
        </Title>
        
        <Stack gap="xl">
          {/* References */}
          <Paper withBorder p="xl" radius="md">
            <Title order={3} mb="md">üìö Refer√™ncias</Title>
            <Stack gap="md">
              <Text>
                <strong>Livros:</strong>
              </Text>
              <List>
                <List.Item>
                  <strong>"Statecharts"</strong> - David Harel
                </List.Item>
                <List.Item>
                  <strong>"Understanding State Machines"</strong> - Various Authors
                </List.Item>
                <List.Item>
                  <strong>"XState in Practice"</strong> - David Khourshid
                </List.Item>
              </List>
              <Text>
                <strong>Artigos & Blogs:</strong>
              </Text>
              <List>
                <List.Item>
                  <a href="https://xstate.js.org/" target="_blank">
                    XState - State machine library
                  </a>
                </List.Item>
                <List.Item>
                  <a href="https://stately.ai/" target="_blank">
                    Stately - State machine tools
                  </a>
                </List.Item>
                <List.Item>
                  <a href="https://statecharts.dev/" target="_blank">
                    Statecharts - Visual state machines
                  </a>
                </List.Item>
              </List>
            </Stack>
          </Paper>
        </Stack>
      </div>

      {/* Summary */}
      <Paper withBorder p="xl" radius="md">
        <Stack gap="md">
          <Group>
            <ThemeIcon size={50} radius="md" variant="light" color="blue">
              <IconBulb size={25} />
            </ThemeIcon>
            <div>
              <Title order={3}>Resumo</Title>
              <Text c="dimmed">State Machines na pr√°tica</Text>
            </div>
          </Group>
          
          <Text>
            State Machines √© sobre uma coisa s√≥: <strong>estados previs√≠veis</strong>. 
            Estados bem definidos, transi√ß√µes claras, comportamento controlado. 
            Use quando estados s√£o complexos e comportamento precisa ser previs√≠vel.
          </Text>
          
          <Text size="sm" c="dimmed">
            <strong>Lembre-se:</strong> N√£o √© sobre usar state machine pra tudo. 
            √â sobre usar quando estados s√£o complexos. E voc√™ n√£o enlouquece.
            <br />
            <strong>Dica:</strong> Comece com estados simples, evolua conforme necess√°rio. 
            Foque em previsibilidade e simplicidade.
          </Text>
        </Stack>
      </Paper>
    </Stack>
  );
}

StateMachines.metadata = {
  title: 'State Machines',
  description: 'Estados previs√≠veis, transi√ß√µes claras, bugs imposs√≠veis. L√≥gica de neg√≥cio organizada.'
};

export default StateMachines;
