[
  {
    "company": "Netflix",
    "icon": "üì∫",
    "title": "Performance em Smart TVs - 200M+ usu√°rios",
    "challenge": "O app React da Netflix rodava extremamente lento em Smart TVs antigas com hardware limitado (1GB RAM, processadores fracos). Usu√°rios esperavam at√© 30 segundos para o app abrir e navegar entre categorias era praticamente imposs√≠vel, causando frustra√ß√£o e cancelamentos em massa.",
    "solution": "Desenvolveram uma arquitetura de renderiza√ß√£o ass√≠ncrona que carrega apenas o conte√∫do vis√≠vel na tela. Implementaram pr√©-rendering adaptativo que detecta a capacidade do dispositivo e ajusta a qualidade do streaming e interface automaticamente. Criaram um sistema de cache inteligente que funciona offline.",
    "practices": [
      "renderiza√ß√£o por lote",
      "SSR parcial",
      "foco no device",
      "cache inteligente"
    ],
    "results": [
      "Redu√ß√£o de 70% no tempo at√© primeira intera√ß√£o",
      "Suporte a 200+ milh√µes de dispositivos diferentes",
      "99.9% de uptime durante eventos cr√≠ticos"
    ],
    "link": "https://github.com/andrew--r/frontend-case-studies#netflix",
    "color": "red"
  },
  {
    "company": "Spotify",
    "icon": "üéß",
    "title": "Web Player com micro frontends - 500M+ usu√°rios",
    "challenge": "O web player do Spotify tinha um bundle JavaScript gigante (mais de 5MB) que demorava muito para carregar. Qualquer mudan√ßa no c√≥digo afetava toda a aplica√ß√£o, tornando deploys arriscados e desenvolvimento lento. Usu√°rios abandonavam o site antes mesmo de ouvir a primeira m√∫sica.",
    "solution": "Adotaram micro frontends, dividindo o app em m√≥dulos independentes (player, playlist, busca, etc.). Cada m√≥dulo pode ser desenvolvido, testado e deployado separadamente. Implementaram lazy loading inteligente e cache de √°udio otimizado.",
    "practices": [
      "modulariza√ß√£o",
      "boundaries bem definidos",
      "lazy load",
      "cache de √°udio"
    ],
    "results": [
      "Redu√ß√£o de 60% no bundle size inicial",
      "Tempo at√© o primeiro play caiu em 40%",
      "Suporte a 500+ milh√µes de usu√°rios simult√¢neos"
    ],
    "link": "https://github.com/andrew--r/frontend-case-studies#spotify",
    "color": "green"
  },
  {
    "company": "Airbnb",
    "icon": "üè†",
    "title": "Imagens otimizadas com LQIP - 150M+ usu√°rios",
    "challenge": "O site da Airbnb tinha p√°ginas que demoravam mais de 8 segundos para carregar devido ao peso das imagens. Os usu√°rios abandonavam a p√°gina antes mesmo de ver o conte√∫do, causando perda significativa de convers√µes. O problema era especialmente cr√≠tico em dispositivos m√≥veis e conex√µes lentas.",
    "solution": "Implementaram Low Quality Image Placeholders (LQIP) - imagens de baixa qualidade (2-5KB) que carregam instantaneamente enquanto as imagens de alta qualidade carregam em background. Combinaram com lazy loading inteligente e compress√£o adaptativa baseada na velocidade da conex√£o do usu√°rio.",
    "practices": [
      "lazy loading",
      "progressive enhancement",
      "build otimizado",
      "compress√£o adaptativa"
    ],
    "results": [
      "Redu√ß√£o de 3.5s no tempo de carregamento",
      "Aumento de 10% na perman√™ncia dos usu√°rios",
      "Suporte a 150+ milh√µes de usu√°rios mensais"
    ],
    "link": "https://github.com/andrew--r/frontend-case-studies#airbnb",
    "color": "pink"
  },
  {
    "company": "Pinterest",
    "icon": "üìå",
    "title": "PWA que virou case de sucesso - 450M+ usu√°rios",
    "challenge": "O site mobile do Pinterest tinha bounce rate de 23% - usu√°rios abandonavam a p√°gina antes mesmo de ver o conte√∫do. O carregamento era lento, as imagens demoravam para aparecer e a navega√ß√£o era confusa em dispositivos m√≥veis. Perdiam milh√µes em receita por performance ruim.",
    "solution": "Reconstru√≠ram totalmente o site mobile usando PWA com React. Implementaram service workers para cache inteligente, virtual scrolling para milhares de pins e lazy loading de imagens que carrega apenas o que est√° vis√≠vel na tela. Criaram um sistema de compress√£o de imagens autom√°tico.",
    "practices": [
      "service workers",
      "virtual scrolling",
      "image lazy loading",
      "compress√£o autom√°tica"
    ],
    "results": [
      "Redu√ß√£o de 40% no tempo de carregamento",
      "Aumento de 44% na receita gerada por usu√°rio",
      "Redu√ß√£o de 60% no tempo at√© primeira intera√ß√£o",
      "Suporte a 450+ milh√µes de usu√°rios mensais"
    ],
    "link": "https://github.com/andrew--r/frontend-case-studies#pinterest",
    "color": "red"
  },
  {
    "company": "Tinder",
    "icon": "üíò",
    "title": "React Native + performance cr√≠tica - 75M+ usu√°rios",
    "challenge": "O app do Tinder travava durante swipes r√°pidos e o scroll infinito de perfis causava crashes frequentes. Em momentos de pico (noites de sexta), o app ficava praticamente inutiliz√°vel, causando perda de usu√°rios para concorrentes. Performance era cr√≠tica para o neg√≥cio.",
    "solution": "Otimizaram a renderiza√ß√£o usando FlatList do React Native com memoiza√ß√£o inteligente. Implementaram lazy loading de perfis que carrega apenas 10-15 perfis por vez e otimizaram os gestos de swipe para responder instantaneamente. Criaram um sistema de cache de imagens otimizado.",
    "practices": [
      "virtual scrolling",
      "image caching",
      "gesture optimization",
      "memoiza√ß√£o inteligente"
    ],
    "results": [
      "Redu√ß√£o de 30% no tempo de resposta do swipe",
      "Diminui√ß√£o de 25% nos crashes de performance",
      "Aumento de 15% no tempo de sess√£o",
      "Suporte a 75+ milh√µes de usu√°rios ativos"
    ],
    "link": "https://github.com/andrew--r/frontend-case-studies#tinder",
    "color": "pink"
  },
  {
    "company": "Slack",
    "icon": "üí¨",
    "title": "Desktop app com Electron otimizado - 12M+ usu√°rios",
    "challenge": "O app desktop do Slack consumia mais de 500MB de RAM mesmo com poucos canais abertos. A busca de mensagens era extremamente lenta e o app travava frequentemente, especialmente em m√°quinas com recursos limitados. Usu√°rios reclamavam constantemente da lentid√£o.",
    "solution": "Implementaram lazy loading de canais que carrega apenas os canais ativos, virtualiza√ß√£o de mensagens que renderiza apenas as vis√≠veis na tela e otimiza√ß√£o de bundle que carrega funcionalidades sob demanda. Criaram um sistema de cache de mensagens inteligente.",
    "practices": [
      "code splitting",
      "virtual scrolling",
      "memory management",
      "cache inteligente"
    ],
    "results": [
      "Redu√ß√£o de 50% no uso de mem√≥ria",
      "Melhoria de 35% na velocidade de busca",
      "Diminui√ß√£o de 60% nos travamentos",
      "Suporte a 12+ milh√µes de usu√°rios ativos"
    ],
    "link": "https://github.com/andrew--r/frontend-case-studies#slack",
    "color": "violet"
  },
  {
    "company": "Uber",
    "icon": "üöó",
    "title": "Maps em tempo real sem travar - 100M+ usu√°rios",
    "challenge": "O mapa do Uber travava quando havia muitos motoristas na regi√£o (centenas de pins simult√¢neos) e as atualiza√ß√µes em tempo real causavam lag extremo. Usu√°rios desistiam de pedir corrida devido √† lentid√£o da interface. Performance era cr√≠tica para o neg√≥cio.",
    "solution": "Desenvolveram um canvas customizado para renderiza√ß√£o do mapa em vez de usar APIs padr√£o. Implementaram clustering inteligente que agrupa motoristas pr√≥ximos e debounce de updates que evita renderiza√ß√µes desnecess√°rias. Criaram um sistema de otimiza√ß√£o de geolocaliza√ß√£o.",
    "practices": [
      "canvas rendering",
      "clustering",
      "websocket optimization",
      "geolocaliza√ß√£o otimizada"
    ],
    "results": [
      "Redu√ß√£o de 70% no tempo de renderiza√ß√£o do mapa",
      "Capacidade de exibir 10x mais motoristas sem lag",
      "Diminui√ß√£o de 45% na taxa de abandono durante o pedido",
      "Suporte a 100+ milh√µes de usu√°rios ativos"
    ],
    "link": "https://github.com/andrew--r/frontend-case-studies#uber",
    "color": "indigo"
  },
  {
    "company": "WhatsApp Web",
    "icon": "üí¨",
    "title": "Chat em tempo real para 2 bilh√µes - 2B+ usu√°rios",
    "challenge": "O WhatsApp Web precisava sincronizar mensagens entre mobile e web sem conflitos, funcionar offline e manter a performance mesmo com milh√µes de usu√°rios simult√¢neos. Qualquer delay ou perda de mensagem era inaceit√°vel. Escalabilidade era cr√≠tica.",
    "solution": "Implementaram arquitetura event-driven com reconcilia√ß√£o inteligente. O sistema funciona offline-first, armazenando mensagens em queue local e sincronizando quando h√° conex√£o, garantindo que nenhuma mensagem seja perdida. Criaram um sistema de criptografia end-to-end otimizado.",
    "practices": [
      "event sourcing",
      "offline sync",
      "optimistic updates",
      "criptografia E2E"
    ],
    "results": [
      "99.9% de sincroniza√ß√£o sem perda de mensagens",
      "Funciona offline com queue de mensagens",
      "Tempo de abertura de chat reduzido em 40%",
      "Suporte a 2+ bilh√µes de usu√°rios ativos"
    ],
    "link": "https://github.com/andrew--r/frontend-case-studies#whatsapp",
    "color": "green"
  },
  {
    "company": "Zoom",
    "icon": "üìπ",
    "title": "Web client que compete com desktop - 300M+ usu√°rios",
    "challenge": "O Zoom Web tinha qualidade de v√≠deo inferior ao app desktop, delay alto e limita√ß√µes de participantes. Empresas preferiam usar o app desktop mesmo em reuni√µes web, causando confus√£o e problemas de compatibilidade. Performance era cr√≠tica para o neg√≥cio.",
    "solution": "Otimizaram WebRTC com canvas customizado para processamento de v√≠deo e worker threads para n√£o bloquear a interface. Implementaram compress√£o adaptativa que ajusta qualidade baseada na conex√£o do usu√°rio. Criaram um sistema de otimiza√ß√£o de √°udio em tempo real.",
    "practices": [
      "webrtc optimization",
      "canvas processing",
      "web workers",
      "compress√£o adaptativa"
    ],
    "results": [
      "Qualidade de v√≠deo equivalente ao app desktop",
      "Redu√ß√£o de 30% no delay de v√≠deo",
      "Suporte a 1000+ participantes no browser",
      "Suporte a 300+ milh√µes de usu√°rios mensais"
    ],
    "link": "https://github.com/andrew--r/frontend-case-studies#zoom",
    "color": "blue"
  },
  {
    "company": "Figma",
    "icon": "üé®",
    "title": "Editor vetorial 100% web - 4M+ usu√°rios",
    "challenge": "Criar um editor gr√°fico complexo como Photoshop rodando no browser parecia imposs√≠vel. Figma precisava de performance equivalente a softwares nativos para renderizar arquivos com milhares de layers e suportar colabora√ß√£o em tempo real. Performance era cr√≠tica para o neg√≥cio.",
    "solution": "Combinaram WebGL para renderiza√ß√£o acelerada, WebAssembly para processamento pesado e arquitetura multiplayer real-time. O editor funciona 100% no browser sem necessidade de instala√ß√£o, mantendo performance nativa. Criaram um sistema de otimiza√ß√£o de vetores.",
    "practices": [
      "webgl rendering",
      "wasm optimization",
      "real-time collaboration",
      "otimiza√ß√£o de vetores"
    ],
    "results": [
      "Performance equivalente a softwares nativos",
      "Colabora√ß√£o em tempo real sem conflitos",
      "Renderiza√ß√£o de arquivos com 1000+ layers sem lag",
      "Suporte a 4+ milh√µes de usu√°rios ativos"
    ],
    "link": "https://github.com/andrew--r/frontend-case-studies#figma",
    "color": "orange"
  },
  {
    "company": "Discord",
    "icon": "üéÆ",
    "title": "Chat gaming com baix√≠ssima lat√™ncia - 150M+ usu√°rios",
    "challenge": "Discord precisava de lat√™ncia de voz abaixo de 50ms para gamers e suporte a centenas de milhares de usu√°rios simult√¢neos por servidor. Qualquer delay ou queda de conex√£o era inaceit√°vel para a comunidade gaming. Performance era cr√≠tica para o neg√≥cio.",
    "solution": "Desenvolveram uma engine de voz customizada usando React + Rust (WebAssembly) para processamento de √°udio e websockets otimizados para mensagens. A arquitetura suporta milh√µes de usu√°rios simult√¢neos com lat√™ncia m√≠nima. Criaram um sistema de otimiza√ß√£o de rede.",
    "practices": [
      "wasm integration",
      "websocket optimization",
      "audio processing",
      "otimiza√ß√£o de rede"
    ],
    "results": [
      "Lat√™ncia de voz abaixo de 50ms",
      "Suporte a 800.000 usu√°rios simult√¢neos por servidor",
      "99.99% de uptime durante eventos cr√≠ticos",
      "Suporte a 150+ milh√µes de usu√°rios ativos"
    ],
    "link": "https://github.com/andrew--r/frontend-case-studies#discord",
    "color": "indigo"
  },
  {
    "company": "Google",
    "icon": "üé®",
    "title": "Teste A/B com 41 tons de azul - 1B+ usu√°rios",
    "challenge": "Os bot√µes de call-to-action (CTA) do Gmail tinham taxas de clique muito baixas, especialmente no bot√£o \"Compose\" (escrever email). A equipe precisava descobrir qual cor geraria mais cliques sem afetar a usabilidade geral da interface. Convers√£o era cr√≠tica.",
    "solution": "Criaram um sistema de testes A/B que testou 41 varia√ß√µes diferentes do tom de azul do bot√£o \"Compose\". Cada varia√ß√£o foi testada com milh√µes de usu√°rios, coletando dados de cliques, tempo de perman√™ncia e satisfa√ß√£o do usu√°rio. Implementaram an√°lise de dados em tempo real.",
    "practices": [
      "cultura de experimenta√ß√£o",
      "foco em convers√£o",
      "an√°lise de dados",
      "testes A/B"
    ],
    "results": [
      "Milh√µes de d√≥lares em receita extra apenas ajustando o tom de azul",
      "Aumento significativo na taxa de cliques",
      "Suporte a 1+ bilh√£o de usu√°rios ativos"
    ],
    "link": "https://github.com/andrew--r/frontend-case-studies#google",
    "color": "blue"
  },
  {
    "company": "Booking.com",
    "icon": "üõéÔ∏è",
    "title": "Testes A/B constantes - 100M+ usu√°rios",
    "challenge": "O site de reservas tinha convers√£o inconsistente - alguns fluxos funcionavam bem em desktop mas falhavam no mobile, outros tinham performance vari√°vel dependendo do pa√≠s. Precisavam otimizar cada elemento da jornada do usu√°rio de forma cont√≠nua.",
    "solution": "Implementaram uma cultura de testes A/B em todo o front-end, testando desde cores de bot√µes at√© fluxos completos de reserva. Cada mudan√ßa passa por testes rigorosos antes de ir para produ√ß√£o, com m√©tricas de convers√£o em tempo real. Criaram um sistema de otimiza√ß√£o cont√≠nua.",
    "practices": [
      "feature toggles",
      "entrega cont√≠nua",
      "UX com m√©tricas",
      "otimiza√ß√£o cont√≠nua"
    ],
    "results": [
      "Melhorias marginais de 1~2% renderam milh√µes ao ano",
      "Aumento significativo na taxa de convers√£o",
      "Suporte a 100+ milh√µes de usu√°rios mensais"
    ],
    "link": "https://github.com/andrew--r/frontend-case-studies#booking",
    "color": "orange"
  },
  {
    "company": "Twitter",
    "icon": "üê¶",
    "title": "Twitter Lite com PWA - 400M+ usu√°rios",
    "challenge": "O app mobile do Twitter consumia muito dados e era lento em redes 2G/3G, especialmente em pa√≠ses emergentes. Usu√°rios abandonavam o app por consumir todo o pacote de dados ou por demorar muito para carregar tweets e imagens.",
    "solution": "Reconstru√≠ram completamente o app usando PWA (Progressive Web App) com React. Implementaram service workers para cache inteligente, compress√£o de imagens autom√°tica e carregamento progressivo que funciona offline. Criaram um sistema de otimiza√ß√£o de dados.",
    "practices": [
      "app shell",
      "lazy loading",
      "cache otimizado",
      "otimiza√ß√£o de dados"
    ],
    "results": [
      "Redu√ß√£o de 70% no consumo de dados",
      "Aumento de 65% nas sess√µes por visitante",
      "Suporte a 400+ milh√µes de usu√°rios ativos"
    ],
    "link": "https://github.com/andrew--r/frontend-case-studies#twitter",
    "color": "cyan"
  },
  {
    "company": "Walmart",
    "icon": "üõí",
    "title": "Black Friday com PWA - 200M+ usu√°rios",
    "challenge": "O site mobile da Walmart travava completamente durante o Black Friday devido ao tr√°fego massivo. Usu√°rios n√£o conseguiam finalizar compras, imagens n√£o carregavam e o carrinho de compras falhava constantemente, causando perda de milh√µes em vendas.",
    "solution": "Reconstru√≠ram o site mobile usando React + PWA com foco em performance. Implementaram preload inteligente de produtos populares, design responsivo otimizado e bundle splitting que carrega apenas o necess√°rio para cada p√°gina. Criaram um sistema de cache otimizado.",
    "practices": [
      "preload inteligente",
      "design responsivo",
      "otimiza√ß√£o de bundle",
      "cache otimizado"
    ],
    "results": [
      "+98% de convers√µes no mobile",
      "-50% no tempo de carregamento",
      "Suporte a 200+ milh√µes de usu√°rios mensais"
    ],
    "link": "https://github.com/andrew--r/frontend-case-studies#walmart-labs",
    "color": "yellow"
  },
  {
    "company": "GOV.UK",
    "icon": "üá¨üáß",
    "title": "Design simples e acess√≠vel - 60M+ usu√°rios",
    "challenge": "Os sites governamentais do Reino Unido eram confusos, lentos e inacess√≠veis. Cidad√£os n√£o conseguiam completar servi√ßos b√°sicos como renovar passaporte ou pagar impostos online, causando filas f√≠sicas e custos altos para o governo.",
    "solution": "Criaram um design system focado em clareza extrema, acessibilidade total (WCAG AAA) e performance. Cada p√°gina tem um objetivo √∫nico, linguagem simples e funciona perfeitamente em qualquer dispositivo, incluindo leitores de tela. Implementaram otimiza√ß√£o de performance.",
    "practices": [
      "mobile-first",
      "conte√∫do direto",
      "WCAG compliance",
      "otimiza√ß√£o de performance"
    ],
    "results": [
      "Aumento na taxa de conclus√£o de servi√ßos p√∫blicos online",
      "Notas alt√≠ssimas de acessibilidade",
      "Suporte a 60+ milh√µes de cidad√£os"
    ],
    "link": "https://github.com/andrew--r/frontend-case-studies#govuk",
    "color": "grape"
  }
]
